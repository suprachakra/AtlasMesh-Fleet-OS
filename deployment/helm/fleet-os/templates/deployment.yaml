{{- range $serviceName, $service := .Values.services }}
{{- if $service.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $service.name }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app: {{ $service.name }}
    component: {{ $serviceName }}
    version: {{ $.Values.image.tag }}
    environment: {{ $.Values.environment }}
    {{- include "fleet-os.labels" $ | nindent 4 }}
spec:
  replicas: {{ $service.replicas }}
  selector:
    matchLabels:
      app: {{ $service.name }}
      component: {{ $serviceName }}
  template:
    metadata:
      labels:
        app: {{ $service.name }}
        component: {{ $serviceName }}
        version: {{ $.Values.image.tag }}
        environment: {{ $.Values.environment }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ $service.port }}"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {{ $.Values.security.serviceAccount.name | default "fleet-os" }}
      {{- if $.Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $.Values.global.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if $.Values.nodeAffinity.enabled }}
      affinity:
        nodeAffinity:
          {{- toYaml $.Values.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution | nindent 10 }}
      {{- end }}
      {{- if $.Values.tolerations }}
      tolerations:
        {{- toYaml $.Values.tolerations | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ $service.name }}
        image: "{{ $.Values.image.registry }}/{{ $service.image }}:{{ $.Values.image.tag }}"
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ $service.port }}
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: {{ $service.name }}
        - name: SERVICE_PORT
          value: "{{ $service.port }}"
        - name: ENVIRONMENT
          value: {{ $.Values.environment }}
        - name: REGION
          value: {{ $.Values.region }}
        - name: TIMEZONE
          value: {{ $.Values.timezone }}
        {{- if $service.env }}
        {{- toYaml $service.env | nindent 8 }}
        {{- end }}
        {{- if $.Values.env }}
        {{- toYaml $.Values.env | nindent 8 }}
        {{- end }}
        # Database connection
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: url
        # Redis connection
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        # Kafka connection
        - name: KAFKA_BROKERS
          value: "{{ $.Release.Name }}-kafka:9092"
        - name: SCHEMA_REGISTRY_URL
          value: "http://{{ $.Release.Name }}-kafka-schema-registry:8081"
        # Monitoring
        - name: JAEGER_ENDPOINT
          value: "http://{{ $.Release.Name }}-jaeger-collector:14268/api/traces"
        - name: PROMETHEUS_GATEWAY
          value: "http://{{ $.Release.Name }}-prometheus-pushgateway:9091"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          {{- toYaml $service.resources | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
{{- end }}
{{- end }}
