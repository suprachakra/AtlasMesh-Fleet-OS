# AtlasMesh Fleet OS - Helm Values Configuration
# Abu Dhabi-centered autonomous vehicle fleet management platform

# Global Configuration
global:
  # Image registry and pull policy
  imageRegistry: "registry.atlasmesh.com"
  imagePullPolicy: IfNotPresent
  imagePullSecrets:
    - name: atlasmesh-registry-secret
  
  # Abu Dhabi specific settings
  timezone: "Asia/Dubai"
  locale: "en-AE"
  
  # Environment
  environment: production # production, staging, development
  
  # Security
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

# Control Center UI Configuration
controlCenterUI:
  enabled: true
  replicaCount: 3
  
  image:
    repository: atlasmesh/control-center-ui
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  # Map Configuration (Abu Dhabi centered)
  mapConfig:
    defaultProvider: "openstreetmap"
    defaultCenter:
      lat: 24.4539
      lng: 54.3773
    defaultZoom: 12
    enableClustering: true
    enableRealTimeUpdates: true
    enableVehicleTrails: true
    enableGeofenceMonitoring: true
    updateInterval: 5000
    maxVehiclesOnMap: 200
  
  # API Configuration
  api:
    baseUrl: "https://api.atlasmesh.com"
    wsUrl: "wss://api.atlasmesh.com"
    timeout: 30000
  
  # Feature Flags
  features:
    enableHeatmaps: false
    enableOfflineMode: false
    enablePerformanceMonitoring: true
    debugMode: false
    mockData: false
  
  # Service Configuration
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
    annotations: {}
  
  # Ingress Configuration
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: app.atlasmesh.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: atlasmesh-tls
        hosts:
          - app.atlasmesh.com
  
  # Resources
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  # Health Checks
  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  
  # Horizontal Pod Autoscaler
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  # Pod Disruption Budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1

# Backend Services Configuration
services:
  # API Gateway
  apiGateway:
    enabled: true
    replicaCount: 3
    image:
      repository: atlasmesh/api-gateway
      tag: "1.0.0"
    service:
      type: ClusterIP
      port: 8080
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "1000m"
  
  # Fleet Manager
  fleetManager:
    enabled: true
    replicaCount: 2
    image:
      repository: atlasmesh/fleet-manager
      tag: "1.0.0"
    service:
      type: ClusterIP
      port: 8081
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  
  # Policy Engine
  policyEngine:
    enabled: true
    replicaCount: 2
    image:
      repository: atlasmesh/policy-engine
      tag: "1.0.0"
    service:
      type: ClusterIP
      port: 8082
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  
  # Vehicle Gateway
  vehicleGateway:
    enabled: true
    replicaCount: 3
    image:
      repository: atlasmesh/vehicle-gateway
      tag: "1.0.0"
    service:
      type: ClusterIP
      port: 8083
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "1000m"
  
  # Telemetry Ingestion
  telemetryIngestion:
    enabled: true
    replicaCount: 2
    image:
      repository: atlasmesh/telemetry-ingestion
      tag: "1.0.0"
    service:
      type: ClusterIP
      port: 8084
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "1000m"

# Database Configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "change-me-in-production"
    username: "atlasmesh"
    password: "change-me-in-production"
    database: "atlasmesh_fleet"
  primary:
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1000m"
    persistence:
      enabled: true
      size: "100Gi"
      storageClass: "gp3"
  metrics:
    enabled: true
  backup:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM

# Redis Configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "change-me-in-production"
  master:
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    persistence:
      enabled: true
      size: "20Gi"
      storageClass: "gp3"
  replica:
    replicaCount: 2
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  metrics:
    enabled: true

# Kafka Configuration
kafka:
  enabled: true
  replicaCount: 3
  zookeeper:
    replicaCount: 3
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    persistence:
      enabled: true
      size: "50Gi"
      storageClass: "gp3"
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1000m"
  persistence:
    enabled: true
    size: "100Gi"
    storageClass: "gp3"
  metrics:
    kafka:
      enabled: true
    jmx:
      enabled: true

# Monitoring Configuration
monitoring:
  # Prometheus
  prometheus:
    enabled: true
    server:
      resources:
        requests:
          memory: "1Gi"
          cpu: "500m"
        limits:
          memory: "2Gi"
          cpu: "1000m"
      persistence:
        enabled: true
        size: "200Gi"
        storageClass: "gp3"
    alertmanager:
      enabled: true
      resources:
        requests:
          memory: "256Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "500m"
  
  # Grafana
  grafana:
    enabled: true
    adminPassword: "change-me-in-production"
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    persistence:
      enabled: true
      size: "10Gi"
      storageClass: "gp3"
    ingress:
      enabled: true
      hosts:
        - grafana.atlasmesh.com
      tls:
        - secretName: grafana-tls
          hosts:
            - grafana.atlasmesh.com
  
  # Jaeger
  jaeger:
    enabled: true
    storage:
      type: elasticsearch
    elasticsearch:
      resources:
        requests:
          memory: "1Gi"
          cpu: "500m"
        limits:
          memory: "2Gi"
          cpu: "1000m"

# Security Configuration
security:
  # Network Policies
  networkPolicies:
    enabled: true
  
  # Pod Security Standards
  podSecurityStandards:
    enabled: true
    enforce: "restricted"
    audit: "restricted"
    warn: "restricted"
  
  # Service Mesh (Istio)
  serviceMesh:
    enabled: false
    mtls: true
  
  # Secrets Management
  secretsManagement:
    provider: "kubernetes" # kubernetes, vault, aws-secrets-manager
    vault:
      address: ""
      path: "secret/atlasmesh"

# Networking Configuration
networking:
  # Ingress Controller
  ingress:
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "50m"
  
  # Load Balancer
  loadBalancer:
    type: "nlb" # nlb, alb, clb
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

# Storage Configuration
storage:
  # Default Storage Class
  defaultStorageClass: "gp3"
  
  # Persistent Volumes
  persistentVolumes:
    # Database storage
    database:
      size: "100Gi"
      storageClass: "gp3"
      accessMode: "ReadWriteOnce"
    
    # File storage
    files:
      size: "50Gi"
      storageClass: "efs"
      accessMode: "ReadWriteMany"
    
    # Monitoring storage
    monitoring:
      size: "200Gi"
      storageClass: "gp3"
      accessMode: "ReadWriteOnce"

# Backup and Disaster Recovery
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM Dubai time
  retention: "30d"
  storage:
    provider: "s3"
    bucket: "atlasmesh-backups"
    region: "me-south-1"  # Middle East (Bahrain)

# Environment-specific Overrides
environments:
  development:
    global:
      environment: development
    controlCenterUI:
      replicaCount: 1
      features:
        debugMode: true
        mockData: true
    monitoring:
      prometheus:
        enabled: false
      grafana:
        enabled: false
    backup:
      enabled: false
  
  staging:
    global:
      environment: staging
    controlCenterUI:
      replicaCount: 2
      api:
        baseUrl: "https://api-staging.atlasmesh.com"
        wsUrl: "wss://api-staging.atlasmesh.com"
      features:
        debugMode: true
        mockData: false
    backup:
      retention: "7d"
  
  production:
    global:
      environment: production
    controlCenterUI:
      replicaCount: 3
      features:
        debugMode: false
        mockData: false
        enablePerformanceMonitoring: true
