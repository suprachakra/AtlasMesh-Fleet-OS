# AtlasMesh Fleet OS - README Diagram Manifest Schema
# This file defines the structure for .readme.diagrams.yaml files

$schema: "http://json-schema.org/draft-07/schema#"
title: "README Diagram Manifest"
description: "Configuration for automated README diagram injection"
type: "object"

required:
  - type
  - strip
  - metadata

properties:
  # Folder type determines template and diagram selection rules
  type:
    type: string
    enum:
      - service        # Backend microservice
      - edge          # ROS2/edge package
      - ui            # Frontend component/app
      - data          # ETL/ML pipeline
      - infrastructure # IaC/deployment
    description: "Folder type determines which template and diagram rules to apply"

  # The three-diagram strip configuration
  strip:
    type: object
    required:
      - diagram1
      - diagram2  
      - diagram3
    properties:
      diagram1:
        $ref: "#/definitions/diagram"
        description: "First diagram - typically 'Where it fits' (C4/architecture)"
      diagram2:
        $ref: "#/definitions/diagram"
        description: "Second diagram - typically 'How it talks' (sequence/flow)"
      diagram3:
        $ref: "#/definitions/diagram"
        description: "Third diagram - typically 'What it owns' (ERD/schema)"

  # Service/component metadata for template substitution
  metadata:
    type: object
    required:
      - name
      - description
      - owner
    properties:
      name:
        type: string
        description: "Service/component name"
      description:
        type: string
        description: "Brief description (1-2 lines for TL;DR)"
      owner:
        type: string
        description: "Team or individual responsible"
      contact:
        type: string
        format: email
        description: "Contact email for support"
      
      # Service-specific metadata
      service:
        type: object
        properties:
          slug:
            type: string
            description: "URL-safe service identifier"
          api_path:
            type: string
            description: "Path to OpenAPI specification"
          events_path:
            type: string
            description: "Path to event schemas"
          database_type:
            type: string
            enum: ["postgresql", "redis", "kafka", "clickhouse", "minio"]
          primary_endpoint:
            type: string
            description: "Main API endpoint"
          health_endpoint:
            type: string
            description: "Health check endpoint"
          metrics_endpoint:
            type: string
            description: "Prometheus metrics endpoint"

      # Edge/ROS2-specific metadata
      edge:
        type: object
        properties:
          package_name:
            type: string
            description: "ROS2 package name"
          ros2_version:
            type: string
            description: "ROS2 distribution (humble, iron, etc.)"
          launch_file:
            type: string
            description: "Primary launch file"
          safety_classification:
            type: string
            enum: ["safety_critical", "safety_related", "non_safety"]
          topics:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                type:
                  type: string
                  enum: ["publisher", "subscriber", "service"]
                message_type:
                  type: string
                qos:
                  type: string

      # UI-specific metadata
      ui:
        type: object
        properties:
          framework:
            type: string
            enum: ["react", "vue", "angular", "svelte"]
          framework_version:
            type: string
          dev_port:
            type: integer
          storybook_url:
            type: string
          design_system:
            type: string

      # Performance and SLA targets
      slos:
        type: object
        properties:
          latency_p95:
            type: string
            description: "P95 latency target (e.g., '120ms')"
          availability:
            type: string
            description: "Availability target (e.g., '99.9%')"
          error_rate:
            type: string
            description: "Error rate target (e.g., '<0.1%')"
          throughput:
            type: string
            description: "Throughput target (e.g., '1000 req/s')"

      # Dependencies
      dependencies:
        type: object
        properties:
          upstream:
            type: array
            items:
              type: string
            description: "Services this depends on"
          downstream:
            type: array
            items:
              type: string
            description: "Services that depend on this"

  # Template customization
  template:
    type: object
    properties:
      base:
        type: string
        enum: ["service", "edge", "ui", "data", "infrastructure"]
        description: "Base template to use"
      custom_sections:
        type: array
        items:
          type: object
          properties:
            title:
              type: string
            content:
              type: string
            position:
              type: string
              enum: ["before_contracts", "after_architecture", "before_links"]

  # Automation settings
  automation:
    type: object
    properties:
      auto_update:
        type: boolean
        default: true
        description: "Whether to auto-update this README"
      diagram_validation:
        type: boolean
        default: true
        description: "Whether to validate diagram paths exist"
      last_updated:
        type: string
        format: date-time
        description: "Last update timestamp (auto-managed)"

definitions:
  diagram:
    type: object
    required:
      - path
      - alt_text
    properties:
      path:
        type: string
        description: "Relative path to diagram SVG file"
        pattern: "^\\.\\./"
      alt_text:
        type: string
        description: "Accessibility alt text for the diagram"
      title:
        type: string
        description: "Optional title for the diagram"
      source:
        type: string
        description: "Path to source file (.mmd, .dsl, etc.)"

# Example manifest files for different types
examples:
  service_example:
    type: service
    strip:
      diagram1:
        path: "../../docs/diagrams/c4/component/fleet-manager.svg"
        alt_text: "Fleet Manager component architecture"
        source: "../../docs/diagrams/c4/component/fleet-manager.mmd"
      diagram2:
        path: "../../docs/diagrams/sequence/fleet_create_trip.svg"
        alt_text: "Create trip sequence flow"
        source: "../../docs/diagrams/sequence/fleet_create_trip.mmd"
      diagram3:
        path: "../../docs/diagrams/erd/fleet_core_database.svg"
        alt_text: "Fleet database ERD"
        source: "../../docs/diagrams/erd/fleet_core_database_v1.mmd"
    metadata:
      name: "Fleet Manager"
      description: "Core fleet management service for vehicle operations and trip coordination"
      owner: "Fleet Platform Team"
      contact: "fleet-team@atlasmesh.com"
      service:
        slug: "fleet-manager"
        api_path: "../../api/openapi/fleet-manager.yaml"
        events_path: "../../contracts/events/fleet-events.avsc"
        database_type: "postgresql"
        primary_endpoint: "POST /api/v1/trips"
        health_endpoint: "/health"
        metrics_endpoint: "/metrics"
      slos:
        latency_p95: "120ms"
        availability: "99.9%"
        error_rate: "<0.1%"
        throughput: "1000 req/s"

  edge_example:
    type: edge
    strip:
      diagram1:
        path: "../../docs/diagrams/ros2/vehicle_agent_nodes.svg"
        alt_text: "Vehicle Agent ROS2 node graph"
      diagram2:
        path: "../../docs/diagrams/sequence/vehicle_startup.svg"
        alt_text: "Vehicle startup sequence"
      diagram3:
        path: "../../docs/diagrams/dfd/edge_cloud_data.svg"
        alt_text: "Edge to cloud data flow"
    metadata:
      name: "Vehicle Agent"
      description: "Core ROS2 package for vehicle control and monitoring"
      owner: "Edge Platform Team"
      contact: "edge-team@atlasmesh.com"
      edge:
        package_name: "vehicle_agent"
        ros2_version: "humble"
        launch_file: "vehicle_agent.launch.py"
        safety_classification: "safety_critical"

  ui_example:
    type: ui
    strip:
      diagram1:
        path: "../../docs/diagrams/ui/control_center_flow.svg"
        alt_text: "Control Center user flow"
      diagram2:
        path: "../../docs/diagrams/api/ui_backend_calls.svg"
        alt_text: "UI to backend API calls"
      diagram3:
        path: "../../docs/diagrams/ui/component_dependencies.svg"
        alt_text: "React component dependencies"
    metadata:
      name: "Control Center UI"
      description: "Real-time fleet monitoring and control interface"
      owner: "Frontend Team"
      contact: "frontend-team@atlasmesh.com"
      ui:
        framework: "react"
        framework_version: "18.2.0"
        dev_port: 3000
        storybook_url: "https://storybook.atlasmesh.com"
