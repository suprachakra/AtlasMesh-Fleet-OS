// Mock data for testing

export const mockVehicles = [
  {
    vehicleId: 'veh_001',
    assetTag: 'AV-001',
    fleetId: 'fleet_001',
    manufacturer: 'Tesla',
    model: 'Model Y',
    serialNumber: 'TY123456789',
    operationalStatus: 'driving_av',
    autonomyLevel: 'L4',
    autonomyStatus: 'active',
    autonomyConfidence: 0.95,
    oddCompliance: true,
    currentLocation: {
      lat: 37.7749,
      lng: -122.4194,
    },
    batteryLevel: 85,
    lastSeen: new Date().toISOString(),
    currentTripId: 'trip_001',
    alerts: [
      {
        alertId: 'alert_001',
        severity: 'medium',
        category: 'technical',
        message: 'Sensor calibration recommended',
        timestamp: new Date().toISOString(),
        acknowledged: false,
      }
    ],
    capabilities: {
      maxSpeed: 120,
      passengerCapacity: 5,
      cargoCapacity: 500,
    },
    sensorConfig: {
      lidarRange: 200,
      cameraCount: 8,
      radarCount: 12,
    },
  },
  {
    vehicleId: 'veh_002',
    assetTag: 'AV-002',
    fleetId: 'fleet_001',
    manufacturer: 'Waymo',
    model: 'Jaguar I-PACE',
    serialNumber: 'WJ987654321',
    operationalStatus: 'remote_assist',
    autonomyLevel: 'L4',
    autonomyStatus: 'degraded',
    autonomyConfidence: 0.72,
    oddCompliance: false,
    currentLocation: {
      lat: 37.7849,
      lng: -122.4094,
    },
    batteryLevel: 45,
    lastSeen: new Date().toISOString(),
    currentTripId: 'trip_002',
    alerts: [
      {
        alertId: 'alert_002',
        severity: 'critical',
        category: 'safety',
        message: 'Remote assistance required - obstacle detection issue',
        timestamp: new Date().toISOString(),
        acknowledged: false,
      }
    ],
    capabilities: {
      maxSpeed: 110,
      passengerCapacity: 4,
      cargoCapacity: 400,
    },
    sensorConfig: {
      lidarRange: 250,
      cameraCount: 12,
      radarCount: 16,
    },
  },
  {
    vehicleId: 'veh_003',
    assetTag: 'AV-003',
    fleetId: 'fleet_001',
    manufacturer: 'Cruise',
    model: 'Bolt EV',
    serialNumber: 'CB456789123',
    operationalStatus: 'safed',
    autonomyLevel: 'L4',
    autonomyStatus: 'manual',
    autonomyConfidence: 0.0,
    oddCompliance: true,
    currentLocation: {
      lat: 37.7649,
      lng: -122.4294,
    },
    batteryLevel: 92,
    lastSeen: new Date().toISOString(),
    currentTripId: null,
    alerts: [
      {
        alertId: 'alert_003',
        severity: 'high',
        category: 'safety',
        message: 'Emergency stop activated',
        timestamp: new Date().toISOString(),
        acknowledged: true,
      }
    ],
    capabilities: {
      maxSpeed: 100,
      passengerCapacity: 4,
      cargoCapacity: 300,
    },
    sensorConfig: {
      lidarRange: 180,
      cameraCount: 6,
      radarCount: 8,
    },
  },
]

export const mockTrips = [
  {
    tripId: 'trip_001',
    vehicleId: 'veh_001',
    vehicleAssetTag: 'AV-001',
    status: 'active',
    missionType: 'passenger_transport',
    origin: {
      lat: 37.7749,
      lng: -122.4194,
      address: '123 Market St, San Francisco, CA',
    },
    destination: {
      lat: 37.7849,
      lng: -122.4094,
      address: '456 Mission St, San Francisco, CA',
    },
    scheduledStart: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
    actualStart: new Date(Date.now() - 25 * 60 * 1000).toISOString(),
    scheduledEnd: new Date(Date.now() + 15 * 60 * 1000).toISOString(),
    eta: new Date(Date.now() + 12 * 60 * 1000).toISOString(),
    progress: 75,
    route: {
      coordinates: [
        [-122.4194, 37.7749],
        [-122.4150, 37.7780],
        [-122.4120, 37.7820],
        [-122.4094, 37.7849],
      ],
    },
  },
  {
    tripId: 'trip_002',
    vehicleId: 'veh_002',
    vehicleAssetTag: 'AV-002',
    status: 'paused',
    missionType: 'cargo_delivery',
    origin: {
      lat: 37.7849,
      lng: -122.4094,
      address: '789 Howard St, San Francisco, CA',
    },
    destination: {
      lat: 37.7949,
      lng: -122.3994,
      address: '321 Folsom St, San Francisco, CA',
    },
    scheduledStart: new Date(Date.now() - 45 * 60 * 1000).toISOString(),
    actualStart: new Date(Date.now() - 40 * 60 * 1000).toISOString(),
    scheduledEnd: new Date(Date.now() + 30 * 60 * 1000).toISOString(),
    eta: new Date(Date.now() + 45 * 60 * 1000).toISOString(),
    progress: 35,
    route: {
      coordinates: [
        [-122.4094, 37.7849],
        [-122.4050, 37.7880],
        [-122.4020, 37.7920],
        [-122.3994, 37.7949],
      ],
    },
  },
]

export const mockAlerts = [
  {
    alertId: 'alert_001',
    vehicleId: 'veh_001',
    vehicleAssetTag: 'AV-001',
    severity: 'medium',
    category: 'technical',
    message: 'Sensor calibration recommended',
    timestamp: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
    acknowledged: false,
    resolved: false,
  },
  {
    alertId: 'alert_002',
    vehicleId: 'veh_002',
    vehicleAssetTag: 'AV-002',
    severity: 'critical',
    category: 'safety',
    message: 'Remote assistance required - obstacle detection issue',
    timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
    acknowledged: false,
    resolved: false,
  },
  {
    alertId: 'alert_003',
    vehicleId: 'veh_003',
    vehicleAssetTag: 'AV-003',
    severity: 'high',
    category: 'safety',
    message: 'Emergency stop activated',
    timestamp: new Date(Date.now() - 60 * 60 * 1000).toISOString(),
    acknowledged: true,
    acknowledgedBy: 'operator_001',
    acknowledgedAt: new Date(Date.now() - 55 * 60 * 1000).toISOString(),
    resolved: false,
  },
  {
    alertId: 'alert_004',
    vehicleId: null,
    severity: 'info',
    category: 'system',
    message: 'System maintenance scheduled for tonight',
    timestamp: new Date(Date.now() - 120 * 60 * 1000).toISOString(),
    acknowledged: true,
    acknowledgedBy: 'admin_001',
    acknowledgedAt: new Date(Date.now() - 115 * 60 * 1000).toISOString(),
    resolved: true,
    resolvedBy: 'admin_001',
    resolvedAt: new Date(Date.now() - 110 * 60 * 1000).toISOString(),
  },
]

export const mockIncidents = [
  {
    incidentId: 'inc_001',
    title: 'Near-miss with pedestrian',
    description: 'Vehicle AV-001 had to perform emergency braking when a pedestrian unexpectedly entered the roadway.',
    severity: 'high',
    category: 'safety',
    status: 'investigating',
    vehicleId: 'veh_001',
    tripId: 'trip_001',
    location: {
      lat: 37.7749,
      lng: -122.4194,
      address: '123 Market St, San Francisco, CA',
    },
    reportedBy: 'operator_001',
    reportedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
    assignedTo: 'safety_lead_001',
    tags: ['pedestrian', 'emergency_braking', 'near_miss'],
    evidence: [
      {
        id: 'ev_001',
        type: 'video',
        name: 'front_camera_incident.mp4',
        url: '/evidence/ev_001.mp4',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        duration: 30,
        size: 15728640, // 15MB
        hash: 'sha256:abc123def456...',
      },
      {
        id: 'ev_002',
        type: 'telemetry',
        name: 'vehicle_telemetry_incident.json',
        url: '/evidence/ev_002.json',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        size: 524288, // 512KB
        hash: 'sha256:def456ghi789...',
      },
    ],
    timeline: [
      {
        id: 'tl_001',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        event: 'Incident Detected',
        description: 'Automatic incident detection triggered by emergency braking event',
        actor: 'system',
      },
      {
        id: 'tl_002',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000 + 30000).toISOString(),
        event: 'Evidence Collected',
        description: 'Video and telemetry data automatically preserved',
        actor: 'system',
      },
      {
        id: 'tl_003',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000 + 120000).toISOString(),
        event: 'Incident Reported',
        description: 'Operator confirmed incident and created formal report',
        actor: 'operator_001',
      },
      {
        id: 'tl_004',
        timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
        event: 'Investigation Assigned',
        description: 'Incident assigned to safety team for investigation',
        actor: 'safety_lead_001',
      },
    ],
    correctiveActions: [
      {
        id: 'ca_001',
        description: 'Review and update pedestrian detection algorithms',
        assignedTo: 'ai_team_lead',
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        status: 'in_progress',
      },
    ],
    preventiveActions: [
      {
        id: 'pa_001',
        description: 'Implement enhanced pedestrian awareness training for all vehicles',
        assignedTo: 'fleet_operations',
        dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),
        status: 'pending',
      },
    ],
  },
  {
    incidentId: 'inc_002',
    title: 'Sensor malfunction during rain',
    description: 'LiDAR sensor on AV-002 experienced intermittent failures during heavy rain conditions.',
    severity: 'medium',
    category: 'technical',
    status: 'resolved',
    vehicleId: 'veh_002',
    tripId: null,
    location: {
      lat: 37.7849,
      lng: -122.4094,
      address: '456 Mission St, San Francisco, CA',
    },
    reportedBy: 'maintenance_tech_001',
    reportedAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
    assignedTo: 'maintenance_lead_001',
    resolvedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
    rootCause: 'Water ingress in LiDAR housing due to worn weather seal',
    tags: ['sensor', 'weather', 'lidar', 'maintenance'],
    evidence: [
      {
        id: 'ev_003',
        type: 'image',
        name: 'lidar_housing_damage.jpg',
        url: '/evidence/ev_003.jpg',
        timestamp: new Date(Date.now() - 20 * 60 * 60 * 1000).toISOString(),
        size: 2097152, // 2MB
        hash: 'sha256:ghi789jkl012...',
      },
      {
        id: 'ev_004',
        type: 'log',
        name: 'sensor_error_logs.txt',
        url: '/evidence/ev_004.txt',
        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        size: 65536, // 64KB
        hash: 'sha256:jkl012mno345...',
      },
    ],
    timeline: [
      {
        id: 'tl_005',
        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        event: 'Issue Reported',
        description: 'Maintenance technician reported intermittent LiDAR failures',
        actor: 'maintenance_tech_001',
      },
      {
        id: 'tl_006',
        timestamp: new Date(Date.now() - 20 * 60 * 60 * 1000).toISOString(),
        event: 'Physical Inspection',
        description: 'Visual inspection revealed water damage to LiDAR housing',
        actor: 'maintenance_tech_001',
      },
      {
        id: 'tl_007',
        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),
        event: 'Repair Completed',
        description: 'LiDAR housing weather seal replaced and tested',
        actor: 'maintenance_tech_002',
      },
      {
        id: 'tl_008',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        event: 'Incident Resolved',
        description: 'Vehicle tested and returned to service',
        actor: 'maintenance_lead_001',
      },
    ],
    correctiveActions: [
      {
        id: 'ca_002',
        description: 'Replace LiDAR housing weather seal',
        assignedTo: 'maintenance_tech_002',
        dueDate: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
        status: 'completed',
        completedAt: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),
      },
    ],
    preventiveActions: [
      {
        id: 'pa_002',
        description: 'Implement quarterly weather seal inspection for all vehicles',
        assignedTo: 'maintenance_lead_001',
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        status: 'in_progress',
      },
    ],
  },
]

export const mockGeofences = [
  {
    id: 'geo_001',
    name: 'Downtown Service Area',
    type: 'service_area',
    geometry: {
      type: 'Feature',
      geometry: {
        type: 'Polygon',
        coordinates: [[
          [-122.4300, 37.7700],
          [-122.4000, 37.7700],
          [-122.4000, 37.8000],
          [-122.4300, 37.8000],
          [-122.4300, 37.7700],
        ]],
      },
    },
    active: true,
    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 'geo_002',
    name: 'School Zone - No Go',
    type: 'no_go',
    geometry: {
      type: 'Feature',
      geometry: {
        type: 'Polygon',
        coordinates: [[
          [-122.4200, 37.7750],
          [-122.4180, 37.7750],
          [-122.4180, 37.7770],
          [-122.4200, 37.7770],
          [-122.4200, 37.7750],
        ]],
      },
    },
    active: true,
    createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 'geo_003',
    name: 'Construction Zone - Slow',
    type: 'slow_zone',
    geometry: {
      type: 'Feature',
      geometry: {
        type: 'Polygon',
        coordinates: [[
          [-122.4150, 37.7800],
          [-122.4130, 37.7800],
          [-122.4130, 37.7820],
          [-122.4150, 37.7820],
          [-122.4150, 37.7800],
        ]],
      },
    },
    active: true,
    createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
  },
]
