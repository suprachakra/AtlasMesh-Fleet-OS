# AtlasMesh Fleet OS - Diagrams as Code Makefile
# Generates all architectural diagrams from source-of-truth
# Version 2.0 | Supports Mermaid, Structurizr DSL (converted from PlantUML)

# Configuration
DOCS_DIR := docs
DIAGRAMS_DIR := $(DOCS_DIR)/diagrams
ARCHITECTURE_DIR := $(DOCS_DIR)/architecture
OUTPUT_DIR := $(DIAGRAMS_DIR)/generated
DOCKER_IMAGE := kroki/kroki:latest
STRUCTURIZR_CLI := structurizr/cli:latest

# Diagram source directories
C4_DIR := $(ARCHITECTURE_DIR)/c4
SEQUENCE_DIR := $(DIAGRAMS_DIR)/sequence
DFD_DIR := $(DIAGRAMS_DIR)/dfd
THREAT_DIR := $(DIAGRAMS_DIR)/threat
UML_DIR := $(DIAGRAMS_DIR)/uml
ERD_DIR := $(DIAGRAMS_DIR)/erd
ROS2_DIR := $(DIAGRAMS_DIR)/ros2
API_DIR := $(DIAGRAMS_DIR)/api

# Output directories
C4_OUTPUT := $(OUTPUT_DIR)/c4
SEQUENCE_OUTPUT := $(OUTPUT_DIR)/sequence
DFD_OUTPUT := $(OUTPUT_DIR)/dfd
THREAT_OUTPUT := $(OUTPUT_DIR)/threat
UML_OUTPUT := $(OUTPUT_DIR)/uml
ERD_OUTPUT := $(OUTPUT_DIR)/erd
ROS2_OUTPUT := $(OUTPUT_DIR)/ros2
API_OUTPUT := $(OUTPUT_DIR)/api

# Colors for output
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

.PHONY: all clean diagrams c4 sequence dfd threat uml erd ros2 api help setup validate

# Default target
all: setup diagrams

# Help target
help:
	@echo "$(GREEN)AtlasMesh Fleet OS - Diagrams as Code$(NC)"
	@echo ""
	@echo "$(YELLOW)Available targets:$(NC)"
	@echo "  all              - Generate all diagrams"
	@echo "  diagrams         - Generate all diagrams (same as all)"
	@echo "  c4               - Generate C4 architecture diagrams"
	@echo "  sequence         - Generate sequence diagrams"
	@echo "  dfd              - Generate data flow diagrams"
	@echo "  threat           - Generate threat model diagrams"
	@echo "  uml              - Generate UML class diagrams"
	@echo "  erd              - Generate entity relationship diagrams"
	@echo "  ros2             - Generate ROS2 node graphs"
	@echo "  api              - Generate API topology diagrams"
	@echo "  validate         - Validate diagram sources"
	@echo "  clean            - Clean generated files"
	@echo "  setup            - Create output directories"
	@echo ""
	@echo "$(YELLOW)Safety-Critical Diagrams:$(NC)"
	@echo "  safety-critical  - Generate only safety-critical diagrams"
	@echo ""
	@echo "$(YELLOW)Examples:$(NC)"
	@echo "  make diagrams    - Generate all diagrams"
	@echo "  make c4          - Generate only C4 diagrams"
	@echo "  make validate    - Check diagram syntax"

# Setup output directories
setup:
	@echo "$(GREEN)Setting up diagram output directories...$(NC)"
	@mkdir -p $(C4_OUTPUT)
	@mkdir -p $(SEQUENCE_OUTPUT)/safety-critical
	@mkdir -p $(SEQUENCE_OUTPUT)/core-flows
	@mkdir -p $(SEQUENCE_OUTPUT)/integration
	@mkdir -p $(DFD_OUTPUT)/safety
	@mkdir -p $(DFD_OUTPUT)/telemetry
	@mkdir -p $(DFD_OUTPUT)/integration
	@mkdir -p $(THREAT_OUTPUT)
	@mkdir -p $(UML_OUTPUT)
	@mkdir -p $(ERD_OUTPUT)
	@mkdir -p $(ROS2_OUTPUT)
	@mkdir -p $(API_OUTPUT)

# Generate all diagrams
diagrams: setup c4 sequence dfd threat uml erd ros2 api
	@echo "$(GREEN)‚úÖ All diagrams generated successfully!$(NC)"

# Generate safety-critical diagrams only
safety-critical: setup
	@echo "$(YELLOW)Generating safety-critical diagrams...$(NC)"
	@$(MAKE) -f Makefile.diagrams sequence-safety
	@$(MAKE) -f Makefile.diagrams dfd-safety
	@$(MAKE) -f Makefile.diagrams threat
	@echo "$(GREEN)‚úÖ Safety-critical diagrams generated!$(NC)"

# C4 Architecture Diagrams (using Structurizr CLI)
c4: setup
	@echo "$(YELLOW)Generating C4 architecture diagrams...$(NC)"
	@if [ -f "$(C4_DIR)/atlasmesh-fleet-os.dsl" ]; then \
		echo "  üìä Processing C4 DSL file..."; \
		docker run --rm -v $(PWD)/$(C4_DIR):/workspace -v $(PWD)/$(C4_OUTPUT):/output \
			$(STRUCTURIZR_CLI) export -workspace /workspace/atlasmesh-fleet-os.dsl -format png -output /output; \
		echo "  ‚úÖ C4 diagrams generated in $(C4_OUTPUT)"; \
	else \
		echo "  ‚ö†Ô∏è  C4 DSL file not found: $(C4_DIR)/atlasmesh-fleet-os.dsl"; \
	fi

# Sequence Diagrams (Mermaid)
sequence: setup sequence-safety sequence-core sequence-integration

sequence-safety:
	@echo "$(YELLOW)Generating safety-critical sequence diagrams...$(NC)"
	@for file in $(SEQUENCE_DIR)/safety-critical/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  üö® Processing safety-critical: $$filename"; \
			docker run --rm -v $(PWD)/$(SEQUENCE_DIR):/workspace -v $(PWD)/$(SEQUENCE_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/safety-critical/$$filename.mmd /output/safety-critical/$$filename.png; \
		fi; \
	done

sequence-core:
	@echo "$(YELLOW)Generating core flow sequence diagrams...$(NC)"
	@for file in $(SEQUENCE_DIR)/core-flows/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  ‚öôÔ∏è  Processing core flow: $$filename"; \
			docker run --rm -v $(PWD)/$(SEQUENCE_DIR):/workspace -v $(PWD)/$(SEQUENCE_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/core-flows/$$filename.mmd /output/core-flows/$$filename.png; \
		fi; \
	done

sequence-integration:
	@echo "$(YELLOW)Generating integration sequence diagrams...$(NC)"
	@for file in $(SEQUENCE_DIR)/integration/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  üîó Processing integration: $$filename"; \
			docker run --rm -v $(PWD)/$(SEQUENCE_DIR):/workspace -v $(PWD)/$(SEQUENCE_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/integration/$$filename.mmd /output/integration/$$filename.png; \
		fi; \
	done

# Data Flow Diagrams (Mermaid)
dfd: setup dfd-safety dfd-telemetry dfd-integration

dfd-safety:
	@echo "$(YELLOW)Generating safety data flow diagrams...$(NC)"
	@for file in $(DFD_DIR)/safety/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  üîí Processing safety DFD: $$filename"; \
			docker run --rm -v $(PWD)/$(DFD_DIR):/workspace -v $(PWD)/$(DFD_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/safety/$$filename.mmd /output/safety/$$filename.png; \
		fi; \
	done

dfd-telemetry:
	@echo "$(YELLOW)Generating telemetry data flow diagrams...$(NC)"
	@for file in $(DFD_DIR)/telemetry/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  üì° Processing telemetry DFD: $$filename"; \
			docker run --rm -v $(PWD)/$(DFD_DIR):/workspace -v $(PWD)/$(DFD_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/telemetry/$$filename.mmd /output/telemetry/$$filename.png; \
		fi; \
	done

dfd-integration:
	@echo "$(YELLOW)Generating integration data flow diagrams...$(NC)"
	@for file in $(DFD_DIR)/integration/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  üîó Processing integration DFD: $$filename"; \
			docker run --rm -v $(PWD)/$(DFD_DIR):/workspace -v $(PWD)/$(DFD_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/integration/$$filename.mmd /output/integration/$$filename.png; \
		fi; \
	done

# Threat Model Diagrams (Mermaid)
threat: setup
	@echo "$(YELLOW)Generating STRIDE threat model diagrams...$(NC)"
	@for file in $(THREAT_DIR)/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  üõ°Ô∏è  Processing threat model: $$filename"; \
			docker run --rm -v $(PWD)/$(THREAT_DIR):/workspace -v $(PWD)/$(THREAT_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/$$filename.mmd /output/$$filename.png; \
		fi; \
	done

# UML Class Diagrams (Mermaid)
uml: setup
	@echo "$(YELLOW)Generating UML class diagrams...$(NC)"
	@for file in $(UML_DIR)/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  üìã Processing UML diagram: $$filename"; \
			docker run --rm -v $(PWD)/$(UML_DIR):/workspace -v $(PWD)/$(UML_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/$$filename.mmd /output/$$filename.png; \
		fi; \
	done

# Entity Relationship Diagrams (Mermaid)
erd: setup
	@echo "$(YELLOW)Generating entity relationship diagrams...$(NC)"
	@for file in $(ERD_DIR)/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  üóÑÔ∏è  Processing ERD: $$filename"; \
			docker run --rm -v $(PWD)/$(ERD_DIR):/workspace -v $(PWD)/$(ERD_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/$$filename.mmd /output/$$filename.png; \
		fi; \
	done

# ROS2 Node Graphs (Mermaid)
ros2: setup
	@echo "$(YELLOW)Generating ROS2 node graphs...$(NC)"
	@for file in $(ROS2_DIR)/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  ü§ñ Processing ROS2 graph: $$filename"; \
			docker run --rm -v $(PWD)/$(ROS2_DIR):/workspace -v $(PWD)/$(ROS2_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/$$filename.mmd /output/$$filename.png; \
		fi; \
	done

# API Topology Diagrams (Mermaid)
api: setup
	@echo "$(YELLOW)Generating API topology diagrams...$(NC)"
	@for file in $(API_DIR)/*.mmd; do \
		if [ -f "$$file" ]; then \
			filename=$$(basename "$$file" .mmd); \
			echo "  üîó Processing API topology: $$filename"; \
			docker run --rm -v $(PWD)/$(API_DIR):/workspace -v $(PWD)/$(API_OUTPUT):/output \
				$(DOCKER_IMAGE) convert mermaid /workspace/$$filename.mmd /output/$$filename.png; \
		fi; \
	done

# Validate diagram sources
validate:
	@echo "$(YELLOW)Validating diagram sources...$(NC)"
	@echo "  üîç Checking Mermaid syntax..."
	@find $(DIAGRAMS_DIR) -name "*.mmd" -exec echo "    Validating: {}" \; -exec \
		docker run --rm -v $(PWD):/workspace $(DOCKER_IMAGE) convert mermaid /workspace/{} /tmp/validation.png \; || \
		(echo "$(RED)‚ùå Mermaid validation failed for {}$(NC)" && exit 1)
	@echo "  üîç Checking Structurizr DSL syntax..."
	@find $(ARCHITECTURE_DIR) -name "*.dsl" -exec echo "    Validating: {}" \; || true
	@echo "$(GREEN)‚úÖ All diagram sources are valid!$(NC)"

# Clean generated files
clean:
	@echo "$(YELLOW)Cleaning generated diagram files...$(NC)"
	@rm -rf $(OUTPUT_DIR)
	@echo "$(GREEN)‚úÖ Cleaned generated files$(NC)"

# Generate diagrams that have changed (for CI)
changed:
	@echo "$(YELLOW)Generating only changed diagrams...$(NC)"
	@# This would integrate with git to detect changed files
	@# For now, just regenerate all
	@$(MAKE) -f Makefile.diagrams diagrams

# CI integration target
ci: validate diagrams
	@echo "$(GREEN)‚úÖ CI diagram generation completed successfully!$(NC)"

# Development target - watch for changes and regenerate
watch:
	@echo "$(YELLOW)Watching for diagram changes...$(NC)"
	@echo "$(RED)Note: This requires 'fswatch' to be installed$(NC)"
	@fswatch -o $(DIAGRAMS_DIR) $(ARCHITECTURE_DIR) | while read f; do \
		echo "$(YELLOW)Detected changes, regenerating diagrams...$(NC)"; \
		$(MAKE) -f Makefile.diagrams diagrams; \
	done

# Generate summary report
report:
	@echo "$(GREEN)AtlasMesh Fleet OS - Diagram Generation Report$(NC)"
	@echo ""
	@echo "$(YELLOW)Generated Diagrams:$(NC)"
	@find $(OUTPUT_DIR) -name "*.png" -o -name "*.svg" | wc -l | xargs echo "  Total diagrams:"
	@echo ""
	@echo "$(YELLOW)By Category:$(NC)"
	@find $(C4_OUTPUT) -name "*.png" 2>/dev/null | wc -l | xargs echo "  C4 Architecture:"
	@find $(SEQUENCE_OUTPUT) -name "*.png" 2>/dev/null | wc -l | xargs echo "  Sequence Diagrams:"
	@find $(DFD_OUTPUT) -name "*.png" 2>/dev/null | wc -l | xargs echo "  Data Flow Diagrams:"
	@find $(THREAT_OUTPUT) -name "*.png" 2>/dev/null | wc -l | xargs echo "  Threat Models:"
	@find $(ERD_OUTPUT) -name "*.png" 2>/dev/null | wc -l | xargs echo "  Entity Relationship:"
	@find $(ROS2_OUTPUT) -name "*.png" 2>/dev/null | wc -l | xargs echo "  ROS2 Node Graphs:"
	@find $(API_OUTPUT) -name "*.png" 2>/dev/null | wc -l | xargs echo "  API Topology:"
	@echo ""
	@echo "$(YELLOW)Safety-Critical Diagrams:$(NC)"
	@find $(SEQUENCE_OUTPUT)/safety-critical -name "*.png" 2>/dev/null | wc -l | xargs echo "  Safety Sequences:"
	@find $(DFD_OUTPUT)/safety -name "*.png" 2>/dev/null | wc -l | xargs echo "  Safety Data Flows:"
	@find $(THREAT_OUTPUT) -name "*vehicle*" -name "*.png" 2>/dev/null | wc -l | xargs echo "  Vehicle Threat Models:"

# Docker image management
pull-images:
	@echo "$(YELLOW)Pulling required Docker images...$(NC)"
	@docker pull $(DOCKER_IMAGE)
	@docker pull $(STRUCTURIZR_CLI)
	@echo "$(GREEN)‚úÖ Docker images updated$(NC)"
