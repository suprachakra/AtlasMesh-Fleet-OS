@startuml fleet_core_database_v1
!theme aws-orange
title Fleet Core Database - Entity Relationship Diagram
subtitle AtlasMesh Fleet OS - Core fleet management entities and relationships
note right: Version 1.0 | Generated from: PostgreSQL schema | Source: fleet-manager/migrations/001_create_fleet_tables.sql

' DATABASE: PostgreSQL with PostGIS extension for geospatial data
' SCHEMA: fleet_core - Core fleet management entities
' COMPLIANCE: Multi-tenant isolation with organization_id foreign keys
' PERFORMANCE: Indexes on frequently queried columns

!define PRIMARY_KEY #FFD700
!define FOREIGN_KEY #87CEEB
!define UNIQUE_KEY #98FB98
!define INDEX_KEY #DDA0DD

entity "organizations" {
    * organization_id : UUID <<PK>> PRIMARY_KEY
    --
    * name : VARCHAR(255)
    * sector : VARCHAR(100) <<CHECK>>
    configuration : JSONB
    entitlements : JSONB
    subscription_tier : VARCHAR(50) <<CHECK>>
    primary_contact_name : VARCHAR(255)
    primary_contact_email : VARCHAR(255)
    primary_contact_phone : VARCHAR(50)
    address : JSONB
    * status : VARCHAR(50) <<CHECK>>
    * created_at : TIMESTAMP WITH TIME ZONE
    * updated_at : TIMESTAMP WITH TIME ZONE
    compliance_frameworks : TEXT[]
    data_residency_requirements : JSONB
    metadata : JSONB
}

entity "fleets" {
    * fleet_id : UUID <<PK>> PRIMARY_KEY
    * organization_id : UUID <<FK>> FOREIGN_KEY
    --
    * name : VARCHAR(255)
    description : TEXT
    * fleet_type : VARCHAR(100) <<CHECK>>
    configuration : JSONB
    max_vehicles : INTEGER
    * status : VARCHAR(50) <<CHECK>>
    * created_at : TIMESTAMP WITH TIME ZONE
    * updated_at : TIMESTAMP WITH TIME ZONE
    created_by : VARCHAR(255)
    updated_by : VARCHAR(255)
    operational_hours : JSONB
    service_area : GEOMETRY(POLYGON, 4326)
    metadata : JSONB
}

entity "vehicles" {
    * vehicle_id : UUID <<PK>> PRIMARY_KEY
    * fleet_id : UUID <<FK>> FOREIGN_KEY
    * organization_id : UUID <<FK>> FOREIGN_KEY
    --
    * asset_tag : VARCHAR(100) <<UNIQUE>>
    * vin : VARCHAR(17) <<UNIQUE>>
    license_plate : VARCHAR(20)
    * manufacturer : VARCHAR(100)
    * model : VARCHAR(100)
    * year : INTEGER
    vehicle_profile : JSONB
    * autonomy_level : VARCHAR(10) <<CHECK>>
    * operational_status : VARCHAR(50) <<CHECK>>
    * autonomy_status : VARCHAR(50) <<CHECK>>
    current_location : GEOMETRY(POINT, 4326)
    current_heading : DECIMAL(5,2)
    current_speed : DECIMAL(5,2)
    battery_level : DECIMAL(5,2)
    fuel_level : DECIMAL(5,2)
    health_score : DECIMAL(5,2)
    odometer_km : DECIMAL(10,2)
    current_trip_id : UUID
    * last_seen : TIMESTAMP WITH TIME ZONE
    * created_at : TIMESTAMP WITH TIME ZONE
    * updated_at : TIMESTAMP WITH TIME ZONE
    created_by : VARCHAR(255)
    updated_by : VARCHAR(255)
    maintenance_schedule : JSONB
    insurance_info : JSONB
    certification_data : JSONB
    metadata : JSONB
}

entity "vehicle_commands" {
    * command_id : UUID <<PK>> PRIMARY_KEY
    * vehicle_id : UUID <<FK>> FOREIGN_KEY
    --
    * command_type : VARCHAR(100)
    command_payload : JSONB
    * priority : VARCHAR(20) <<CHECK>>
    * issued_by : VARCHAR(255)
    * status : VARCHAR(50) <<CHECK>>
    * issued_at : TIMESTAMP WITH TIME ZONE
    sent_at : TIMESTAMP WITH TIME ZONE
    acknowledged_at : TIMESTAMP WITH TIME ZONE
    completed_at : TIMESTAMP WITH TIME ZONE
    expires_at : TIMESTAMP WITH TIME ZONE
    result : JSONB
    error_message : TEXT
    retry_count : INTEGER
    correlation_id : UUID
    dual_auth_operator : VARCHAR(255)
    safety_override : BOOLEAN
    metadata : JSONB
}

entity "trips" {
    * trip_id : UUID <<PK>> PRIMARY_KEY
    * vehicle_id : UUID <<FK>> FOREIGN_KEY
    * fleet_id : UUID <<FK>> FOREIGN_KEY
    * organization_id : UUID <<FK>> FOREIGN_KEY
    --
    * trip_type : VARCHAR(50) <<CHECK>>
    * status : VARCHAR(50) <<CHECK>>
    origin : GEOMETRY(POINT, 4326)
    destination : GEOMETRY(POINT, 4326)
    planned_route : GEOMETRY(LINESTRING, 4326)
    actual_route : GEOMETRY(LINESTRING, 4326)
    * scheduled_start : TIMESTAMP WITH TIME ZONE
    actual_start : TIMESTAMP WITH TIME ZONE
    scheduled_end : TIMESTAMP WITH TIME ZONE
    actual_end : TIMESTAMP WITH TIME ZONE
    distance_km : DECIMAL(8,2)
    duration_minutes : INTEGER
    passenger_count : INTEGER
    cargo_weight_kg : DECIMAL(8,2)
    * created_at : TIMESTAMP WITH TIME ZONE
    * updated_at : TIMESTAMP WITH TIME ZONE
    created_by : VARCHAR(255)
    updated_by : VARCHAR(255)
    weather_conditions : JSONB
    traffic_conditions : JSONB
    incidents : JSONB
    cost_breakdown : JSONB
    customer_rating : DECIMAL(2,1)
    metadata : JSONB
}

entity "maintenance_records" {
    * maintenance_id : UUID <<PK>> PRIMARY_KEY
    * vehicle_id : UUID <<FK>> FOREIGN_KEY
    --
    * maintenance_type : VARCHAR(100) <<CHECK>>
    * status : VARCHAR(50) <<CHECK>>
    * scheduled_date : TIMESTAMP WITH TIME ZONE
    actual_date : TIMESTAMP WITH TIME ZONE
    description : TEXT
    technician : VARCHAR(255)
    location : VARCHAR(255)
    odometer_at_service : DECIMAL(10,2)
    cost : DECIMAL(10,2)
    parts_used : JSONB
    labor_hours : DECIMAL(4,2)
    next_service_km : DECIMAL(10,2)
    next_service_date : TIMESTAMP WITH TIME ZONE
    * created_at : TIMESTAMP WITH TIME ZONE
    * updated_at : TIMESTAMP WITH TIME ZONE
    created_by : VARCHAR(255)
    warranty_info : JSONB
    compliance_certificates : JSONB
    metadata : JSONB
}

entity "incidents" {
    * incident_id : UUID <<PK>> PRIMARY_KEY
    * vehicle_id : UUID <<FK>> FOREIGN_KEY
    * trip_id : UUID <<FK>> FOREIGN_KEY
    --
    * incident_type : VARCHAR(100) <<CHECK>>
    * severity : VARCHAR(20) <<CHECK>>
    * status : VARCHAR(50) <<CHECK>>
    * occurred_at : TIMESTAMP WITH TIME ZONE
    location : GEOMETRY(POINT, 4326)
    description : TEXT
    * reported_by : VARCHAR(255)
    assigned_to : VARCHAR(255)
    resolved_at : TIMESTAMP WITH TIME ZONE
    resolution_notes : TEXT
    * created_at : TIMESTAMP WITH TIME ZONE
    * updated_at : TIMESTAMP WITH TIME ZONE
    weather_at_incident : JSONB
    vehicle_state_at_incident : JSONB
    witness_statements : JSONB
    media_attachments : JSONB
    insurance_claim_id : VARCHAR(100)
    regulatory_report_id : VARCHAR(100)
    root_cause_analysis : JSONB
    corrective_actions : JSONB
    metadata : JSONB
}

entity "policies" {
    * policy_id : UUID <<PK>> PRIMARY_KEY
    * organization_id : UUID <<FK>> FOREIGN_KEY
    --
    * policy_name : VARCHAR(255) <<UNIQUE>>
    * policy_type : VARCHAR(100) <<CHECK>>
    * version : INTEGER
    policy_content : TEXT
    * status : VARCHAR(50) <<CHECK>>
    * created_at : TIMESTAMP WITH TIME ZONE
    * updated_at : TIMESTAMP WITH TIME ZONE
    created_by : VARCHAR(255)
    updated_by : VARCHAR(255)
    effective_from : TIMESTAMP WITH TIME ZONE
    effective_until : TIMESTAMP WITH TIME ZONE
    approval_status : VARCHAR(50) <<CHECK>>
    approved_by : VARCHAR(255)
    approved_at : TIMESTAMP WITH TIME ZONE
    tags : TEXT[]
    metadata : JSONB
}

entity "audit_logs" {
    * audit_id : UUID <<PK>> PRIMARY_KEY
    * organization_id : UUID <<FK>> FOREIGN_KEY
    --
    * event_type : VARCHAR(100)
    * entity_type : VARCHAR(100)
    * entity_id : UUID
    * action : VARCHAR(50)
    * performed_by : VARCHAR(255)
    * performed_at : TIMESTAMP WITH TIME ZONE
    old_values : JSONB
    new_values : JSONB
    ip_address : INET
    user_agent : TEXT
    session_id : VARCHAR(255)
    correlation_id : UUID
    compliance_flags : TEXT[]
    retention_until : TIMESTAMP WITH TIME ZONE
    metadata : JSONB
}

' === RELATIONSHIPS ===

organizations ||--o{ fleets : "owns"
organizations ||--o{ vehicles : "owns"
organizations ||--o{ policies : "defines"
organizations ||--o{ audit_logs : "generates"

fleets ||--o{ vehicles : "contains"
fleets ||--o{ trips : "operates"

vehicles ||--o{ vehicle_commands : "receives"
vehicles ||--o{ trips : "performs"
vehicles ||--o{ maintenance_records : "undergoes"
vehicles ||--o{ incidents : "involved_in"

trips ||--o{ incidents : "may_have"

' === INDEXES AND CONSTRAINTS ===

note top of organizations : **BUSINESS RULES:**\n• sector determines available features\n• Only 'active' orgs can operate vehicles\n• compliance_frameworks array for regulations\n• data_residency_requirements for privacy

note top of vehicles : **SAFETY CONSTRAINTS:**\n• health_score >= 70 required for dispatch\n• autonomy_level must match vehicle capabilities\n• current_location updated every 10 seconds\n• last_seen timeout triggers alerts

note top of vehicle_commands : **SECURITY RULES:**\n• Safety-critical commands require dual_auth\n• Commands expire after timeout period\n• All commands logged for audit trail\n• correlation_id for request tracing

note top of trips : **OPERATIONAL RULES:**\n• planned vs actual route comparison\n• Weather/traffic conditions recorded\n• Customer rating for service quality\n• Cost breakdown for billing

note bottom of audit_logs : **COMPLIANCE:**\n• All data changes audited\n• Retention policies enforced\n• IP address and session tracking\n• Correlation IDs for tracing

' === PERFORMANCE NOTES ===

note right of vehicles : **PERFORMANCE INDEXES:**\n• idx_vehicles_location (GiST)\n• idx_vehicles_fleet_status\n• idx_vehicles_last_seen\n• idx_vehicles_health_score

note right of trips : **GEOSPATIAL INDEXES:**\n• idx_trips_origin (GiST)\n• idx_trips_destination (GiST)\n• idx_trips_route (GiST)\n• idx_trips_scheduled_start

@enduml
