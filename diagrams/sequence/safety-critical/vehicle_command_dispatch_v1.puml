@startuml vehicle_command_dispatch_v1
!theme aws-orange
title Vehicle Command Dispatch Flow - AtlasMesh Fleet OS
subtitle SAFETY CRITICAL: Normal vehicle command validation and dispatch
note right: Version 1.0 | Generated from: Fleet Manager traces | Safety Level: HIGH

' SAFETY: This diagram shows normal vehicle command dispatch with validation
' INTEGRATION CONTRACT: REST API + gRPC + Kafka + WebSocket chain
' LATENCY BUDGET: <200ms for normal commands, <100ms for safety commands
' COMPLIANCE: All commands logged for audit and safety case generation

actor "Fleet Operator" as operator #blue
participant "Control Center UI" as ui #lightblue
participant "API Gateway" as gateway #orange
participant "Auth Service" as auth #yellow
participant "Policy Engine" as policy #green
participant "Fleet Manager" as fleet #lightgreen
participant "Vehicle Gateway" as vgw #blue
participant "Event Bus (Kafka)" as kafka #purple
participant "Vehicle Agent (ROS2)" as agent #brown
participant "Vehicle Systems" as vehicle #darkblue

== COMMAND INITIATION ==

operator -> ui: Select vehicle\nChoose command type
note right operator: BUSINESS: Operator initiates\nnormal fleet operation

ui -> ui: Validate command locally\nCheck vehicle availability
note right ui: UX: Client-side validation\nfor immediate feedback

ui -> gateway: POST /api/v1/vehicles/{id}/commands\n{command_type, payload, priority}
note right ui: API CONTRACT: RESTful command\nwith structured payload

== AUTHENTICATION & AUTHORIZATION ==

gateway -> auth: Validate JWT token\nExtract user context
auth -> auth: Verify token signature\nCheck expiration
auth --> gateway: ✓ Valid user\n{user_id, roles, permissions}

gateway -> policy: Evaluate command policy\n{user, vehicle, command, context}
note right gateway: POLICY: Policy-as-code evaluation\nusing OPA/Rego rules

policy -> policy: **POLICY EVALUATION**\n- Check user permissions\n- Validate vehicle state\n- Assess operational context
policy --> gateway: ✓ Command allowed\n{decision, constraints}

== COMMAND VALIDATION ==

gateway -> fleet: gRPC: ValidateCommand\n{vehicle_id, command, user_context}
note right gateway: SERVICE: Fleet Manager validates\nbusiness logic constraints

fleet -> fleet: **BUSINESS VALIDATION**\n- Vehicle operational status\n- Command compatibility\n- Fleet policies
note right fleet: BUSINESS LOGIC: Ensure command\nis safe and appropriate

fleet -> fleet: Check vehicle health score\nMinimum threshold: 70%
note right fleet: SAFETY: Unhealthy vehicles\ncannot receive commands

alt Vehicle health < 70%
    fleet --> gateway: ❌ Command rejected\n{reason: "Vehicle unhealthy"}
    gateway --> ui: HTTP 400: Command rejected
    ui -> operator: Error: Vehicle not ready
    note right ui: SAFETY: Prevent commands\nto unhealthy vehicles
else Vehicle healthy
    fleet --> gateway: ✓ Command validated\n{command_id, estimated_duration}
end

== COMMAND DISPATCH ==

gateway -> vgw: gRPC: DispatchCommand\n{command_id, vehicle_id, payload}
note right gateway: INTEGRATION: Hand-off to\nvehicle communication layer

vgw -> vgw: **COMMAND ENRICHMENT**\n- Add correlation ID\n- Set timeout\n- Assign priority queue
note right vgw: PERF: Command metadata\nfor tracking and routing

alt Safety-critical command
    vgw -> vgw: **DUAL AUTHORIZATION CHECK**\nRequire two operator tokens
    note right vgw: SAFETY: Critical commands need\ndual authorization
    
    alt Missing dual auth
        vgw --> gateway: ❌ Dual auth required
        gateway --> ui: HTTP 403: Dual authorization needed
        ui -> operator: Prompt for second operator
        note right ui: SECURITY: Safety-critical commands\nrequire two operators
    end
end

vgw -> kafka: Publish command event\ntopic: vehicle.commands.{vehicle_id}
note right vgw: AUDIT: All commands logged\nfor compliance tracking

== VEHICLE COMMUNICATION ==

vgw -> agent: WebSocket: Command message\n{command_id, type, payload, timeout}
note right vgw: INTEGRATION: Real-time WebSocket\nfor reliable delivery

agent -> agent: **COMMAND PROCESSING**\n- Validate message format\n- Check vehicle readiness\n- Queue for execution
note right agent: EDGE: On-vehicle validation\nand execution planning

agent -> vehicle: ROS2: Command topic\n{command_data, safety_constraints}
note right agent: ROS2 CONTRACT: Structured command\nwith safety parameters

== COMMAND EXECUTION ==

vehicle -> vehicle: **EXECUTE COMMAND**\n- Validate safety constraints\n- Execute vehicle action\n- Monitor execution
note right vehicle: SAFETY: Vehicle systems\nvalidate and execute safely

vehicle -> agent: ROS2: Execution status\n{status: IN_PROGRESS, telemetry}
agent -> vgw: WebSocket: Status update\n{command_id, status, progress}

== COMPLETION & FEEDBACK ==

vehicle -> agent: ROS2: Command completed\n{status: SUCCESS, final_state}
agent -> vgw: WebSocket: Command completed\n{command_id, status: COMPLETED, result}

vgw -> kafka: Publish completion event\ntopic: vehicle.events.command_completed
vgw -> fleet: gRPC: UpdateCommandStatus\n{command_id, status: COMPLETED}

fleet -> fleet: Update command history\nRecord execution metrics
fleet --> gateway: Command completed\n{command_id, execution_time}

gateway --> ui: HTTP 200: Command executed\n{command_id, status, result}
ui -> operator: **SUCCESS NOTIFICATION**\nCommand executed successfully

== ERROR HANDLING ==

alt Command execution fails
    vehicle -> agent: ROS2: Execution failed\n{error_code, reason}
    agent -> vgw: WebSocket: Command failed\n{command_id, error}
    
    vgw -> kafka: Publish failure event\ntopic: vehicle.events.command_failed
    vgw -> fleet: gRPC: UpdateCommandStatus\n{command_id, status: FAILED}
    
    fleet --> gateway: Command failed\n{command_id, error_reason}
    gateway --> ui: HTTP 500: Command failed
    ui -> operator: **ERROR NOTIFICATION**\nCommand execution failed
    
    note right ui: ERROR HANDLING: Clear error\nmessages for operator action
end

== AUDIT & COMPLIANCE ==

kafka -> kafka: **AUDIT TRAIL**\nStore all command events\nfor compliance review
note right kafka: COMPLIANCE: Complete audit trail\nfor safety certification

@enduml
