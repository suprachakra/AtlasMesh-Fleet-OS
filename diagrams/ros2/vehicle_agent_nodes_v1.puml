@startuml vehicle_agent_nodes_v1
!theme aws-orange
title ROS2 Vehicle Agent - Node Graph
subtitle AtlasMesh Fleet OS - Edge stack ROS2 nodes and topic flows
note right: Version 1.0 | Generated from: ROS2 launch files + ros2 graph | Edge Stack

' ROS2 NODE GRAPH: Vehicle Agent edge stack architecture
' INTEGRATION CONTRACT: ROS2 Humble with DDS middleware
' SAFETY: Safety-critical nodes with redundancy and monitoring
' PERFORMANCE: Real-time constraints with QoS policies

!define SAFETY_CRITICAL #ff4757
!define PERCEPTION #3742fa
!define CONTROL #2ed573
!define COMMUNICATION #ffa502
!define MONITORING #747d8c

' === SAFETY CRITICAL NODES ===

package "Safety Critical Nodes" SAFETY_CRITICAL {
    node "safety_monitor" as safety {
        **Safety Monitor Node**
        --
        • Monitors all system health
        • Enforces safety constraints
        • Triggers emergency stops
        • Validates sensor data
        --
        **QoS:** RELIABLE, KEEP_LAST(1)
        **Frequency:** 100 Hz
        **Priority:** HIGHEST
    }
    
    node "emergency_stop" as estop {
        **Emergency Stop Node**
        --
        • Immediate brake activation
        • Autonomy system shutdown
        • Hazard light control
        • Safe state enforcement
        --
        **QoS:** RELIABLE, KEEP_LAST(1)
        **Latency:** <10ms
        **Priority:** CRITICAL
    }
    
    node "watchdog" as watchdog {
        **System Watchdog**
        --
        • Node health monitoring
        • Heartbeat validation
        • Automatic restart
        • Failover coordination
        --
        **QoS:** RELIABLE, KEEP_LAST(10)
        **Frequency:** 10 Hz
        **Priority:** HIGH
    }
}

' === PERCEPTION NODES ===

package "Perception Stack" PERCEPTION {
    node "lidar_driver" as lidar {
        **LiDAR Driver**
        --
        • Point cloud generation
        • Obstacle detection
        • Range measurements
        • Calibration management
        --
        **QoS:** BEST_EFFORT, KEEP_LAST(3)
        **Frequency:** 20 Hz
        **Data:** PointCloud2
    }
    
    node "camera_driver" as camera {
        **Camera Driver**
        --
        • Image capture
        • Lane detection
        • Traffic sign recognition
        • Object classification
        --
        **QoS:** BEST_EFFORT, KEEP_LAST(5)
        **Frequency:** 30 Hz
        **Data:** Image, CompressedImage
    }
    
    node "radar_driver" as radar {
        **Radar Driver**
        --
        • Velocity measurements
        • Weather-robust detection
        • Long-range sensing
        • Doppler analysis
        --
        **QoS:** RELIABLE, KEEP_LAST(3)
        **Frequency:** 25 Hz
        **Data:** RadarScan
    }
    
    node "sensor_fusion" as fusion {
        **Sensor Fusion**
        --
        • Multi-sensor integration
        • Kalman filtering
        • Uncertainty quantification
        • Confidence scoring
        --
        **QoS:** RELIABLE, KEEP_LAST(1)
        **Frequency:** 50 Hz
        **Algorithm:** Extended Kalman Filter
    }
    
    node "perception_pipeline" as perception {
        **Perception Pipeline**
        --
        • Object tracking
        • Semantic segmentation
        • Depth estimation
        • Scene understanding
        --
        **QoS:** RELIABLE, KEEP_LAST(1)
        **Frequency:** 20 Hz
        **ML Models:** YOLO, SegNet
    }
}

' === CONTROL NODES ===

package "Control Stack" CONTROL {
    node "localization" as localization {
        **Localization Node**
        --
        • GNSS/IMU fusion
        • Map matching
        • Pose estimation
        • Coordinate transforms
        --
        **QoS:** RELIABLE, KEEP_LAST(1)
        **Frequency:** 100 Hz
        **Accuracy:** <10cm
    }
    
    node "path_planner" as planner {
        **Path Planner**
        --
        • Route optimization
        • Obstacle avoidance
        • Traffic rule compliance
        • Dynamic re-planning
        --
        **QoS:** RELIABLE, KEEP_LAST(1)
        **Frequency:** 10 Hz
        **Algorithm:** A*, RRT*
    }
    
    node "motion_controller" as controller {
        **Motion Controller**
        --
        • Trajectory following
        • Speed regulation
        • Steering control
        • Brake management
        --
        **QoS:** RELIABLE, KEEP_LAST(1)
        **Frequency:** 100 Hz
        **Control:** PID, MPC
    }
    
    node "vehicle_interface" as interface {
        **Vehicle Interface**
        --
        • CAN bus communication
        • Actuator commands
        • Sensor data collection
        • Hardware abstraction
        --
        **QoS:** RELIABLE, KEEP_LAST(1)
        **Frequency:** 1000 Hz
        **Protocol:** CAN, Ethernet
    }
}

' === COMMUNICATION NODES ===

package "Communication Stack" COMMUNICATION {
    node "fleet_gateway" as gateway {
        **Fleet Gateway**
        --
        • WebSocket client
        • Command processing
        • Telemetry transmission
        • Status reporting
        --
        **QoS:** RELIABLE, KEEP_LAST(10)
        **Frequency:** 10 Hz
        **Protocol:** WebSocket, MQTT
    }
    
    node "v2x_communication" as v2x {
        **V2X Communication**
        --
        • Vehicle-to-vehicle (V2V)
        • Vehicle-to-infrastructure (V2I)
        • DSRC/5G connectivity
        • Cooperative awareness
        --
        **QoS:** BEST_EFFORT, KEEP_LAST(5)
        **Frequency:** 10 Hz
        **Standard:** IEEE 802.11p
    }
    
    node "telemetry_collector" as telemetry {
        **Telemetry Collector**
        --
        • Data aggregation
        • Compression
        • Buffering
        • Transmission scheduling
        --
        **QoS:** RELIABLE, KEEP_LAST(100)
        **Frequency:** 1 Hz
        **Compression:** LZ4
    }
}

' === MONITORING NODES ===

package "Monitoring Stack" MONITORING {
    node "diagnostics" as diagnostics {
        **Diagnostics Node**
        --
        • System health monitoring
        • Performance metrics
        • Error detection
        • Log aggregation
        --
        **QoS:** RELIABLE, KEEP_LAST(50)
        **Frequency:** 1 Hz
        **Metrics:** CPU, Memory, Network
    }
    
    node "data_recorder" as recorder {
        **Data Recorder**
        --
        • ROS bag recording
        • Selective logging
        • Compression
        • Storage management
        --
        **QoS:** BEST_EFFORT, KEEP_LAST(1)
        **Storage:** 500GB SSD
        **Retention:** 7 days
    }
}

' === ROS2 TOPICS (Data Flows) ===

' Safety Critical Topics
safety --> estop : **/emergency_stop**\n{trigger, reason}
watchdog --> safety : **/node_health**\n{status, heartbeat}
estop --> interface : **/brake_command**\n{force, immediate}

' Perception Topics
lidar --> fusion : **/lidar/points**\nPointCloud2
camera --> fusion : **/camera/image**\nImage
radar --> fusion : **/radar/scan**\nRadarScan
fusion --> perception : **/fused_objects**\nObjectArray
perception --> planner : **/detected_objects**\nObjectArray

' Control Topics
localization --> planner : **/current_pose**\nPoseWithCovariance
planner --> controller : **/planned_path**\nPath
controller --> interface : **/control_commands**\nTwist
interface --> localization : **/vehicle_state**\nOdometry

' Communication Topics
gateway --> controller : **/fleet_commands**\nVehicleCommand
telemetry --> gateway : **/vehicle_telemetry**\nTelemetryMsg
v2x --> perception : **/v2x_objects**\nObjectArray

' Monitoring Topics
diagnostics --> telemetry : **/diagnostics**\nDiagnosticArray
recorder --> recorder : **/rosbag_status**\nBagStatus

' Cross-cutting Topics
safety --> telemetry : **/safety_status**\nSafetyStatus
watchdog --> diagnostics : **/system_health**\nSystemHealth
fusion --> telemetry : **/sensor_status**\nSensorStatus

' === TOPIC ANNOTATIONS ===

note top of safety : **SAFETY CRITICAL TOPICS:**\n• /emergency_stop - Immediate brake activation\n• /safety_status - Continuous safety monitoring\n• /system_health - Node health validation\n• All safety topics use RELIABLE QoS

note top of perception : **PERCEPTION TOPICS:**\n• /lidar/points - 3D point clouds (20Hz)\n• /camera/image - RGB images (30Hz)\n• /radar/scan - Radar detections (25Hz)\n• /fused_objects - Sensor fusion output (50Hz)

note top of controller : **CONTROL TOPICS:**\n• /planned_path - Trajectory waypoints (10Hz)\n• /control_commands - Actuator commands (100Hz)\n• /current_pose - Vehicle localization (100Hz)\n• All control topics use RELIABLE QoS

note top of gateway : **COMMUNICATION TOPICS:**\n• /fleet_commands - Commands from fleet (async)\n• /vehicle_telemetry - Status to fleet (10Hz)\n• /v2x_objects - V2X cooperative data (10Hz)\n• WebSocket and MQTT protocols supported

' === DEPLOYMENT NOTES ===

note bottom : **DEPLOYMENT CONFIGURATION:**\n• ROS2 Humble LTS on Ubuntu 22.04\n• DDS Middleware: Fast-DDS (default)\n• Real-time kernel for control nodes\n• Docker containers for isolation\n• systemd services for auto-start\n• Resource limits per node\n• CPU affinity for critical nodes

@enduml
