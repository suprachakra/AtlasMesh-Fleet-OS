# AtlasMesh Fleet OS - Production Environment
# 
# This environment is designed for:
# - Production workloads with high availability
# - Multi-region deployment capability
# - Enterprise-grade security and compliance
# - Disaster recovery and backup strategies
# - Performance optimization and scaling
# - 24/7 monitoring and alerting

version: '3.8'

services:
  # Production Database Cluster with High Availability
  postgres-primary:
    image: postgres:15-alpine
    container_name: atlasmesh-postgres-primary-prod
    environment:
      POSTGRES_DB: atlasmesh_prod
      POSTGRES_USER: atlasmesh_prod
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD_FILE: /run/secrets/postgres_replication_password
      POSTGRES_SYNCHRONOUS_COMMIT: 'on'
      POSTGRES_WAL_LEVEL: replica
      POSTGRES_MAX_WAL_SENDERS: 3
      POSTGRES_CHECKPOINT_SEGMENTS: 32
      POSTGRES_SHARED_BUFFERS: 2GB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 6GB
    volumes:
      - postgres_prod_primary_data:/var/lib/postgresql/data
      - ../../scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
      - ../../config/postgresql/postgresql-prod.conf:/etc/postgresql/postgresql.conf:ro
      - postgres_prod_backups:/backups
    secrets:
      - postgres_password
      - postgres_replication_password
    ports:
      - "5435:5432"
    networks:
      - atlasmesh-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atlasmesh_prod -d atlasmesh_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  postgres-replica-1:
    image: postgres:15-alpine
    container_name: atlasmesh-postgres-replica-1-prod
    environment:
      POSTGRES_MASTER_SERVICE: postgres-primary
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD_FILE: /run/secrets/postgres_replication_password
      POSTGRES_MASTER_PORT_NUMBER: 5432
    volumes:
      - postgres_prod_replica_1_data:/var/lib/postgresql/data
    secrets:
      - postgres_replication_password
    networks:
      - atlasmesh-prod-network
    depends_on:
      - postgres-primary
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  postgres-replica-2:
    image: postgres:15-alpine
    container_name: atlasmesh-postgres-replica-2-prod
    environment:
      POSTGRES_MASTER_SERVICE: postgres-primary
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD_FILE: /run/secrets/postgres_replication_password
      POSTGRES_MASTER_PORT_NUMBER: 5432
    volumes:
      - postgres_prod_replica_2_data:/var/lib/postgresql/data
    secrets:
      - postgres_replication_password
    networks:
      - atlasmesh-prod-network
    depends_on:
      - postgres-primary
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Redis Cluster for High Availability Caching
  redis-master:
    image: redis:7-alpine
    container_name: atlasmesh-redis-master-prod
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD_PROD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6382:6379"
    volumes:
      - redis_prod_master_data:/data
    networks:
      - atlasmesh-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
      restart_policy:
        condition: on-failure

  redis-replica-1:
    image: redis:7-alpine
    container_name: atlasmesh-redis-replica-1-prod
    command: >
      redis-server 
      --replicaof redis-master 6379
      --requirepass ${REDIS_PASSWORD_PROD}
      --masterauth ${REDIS_PASSWORD_PROD}
      --appendonly yes
    volumes:
      - redis_prod_replica_1_data:/data
    networks:
      - atlasmesh-prod-network
    depends_on:
      - redis-master
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  redis-replica-2:
    image: redis:7-alpine
    container_name: atlasmesh-redis-replica-2-prod
    command: >
      redis-server 
      --replicaof redis-master 6379
      --requirepass ${REDIS_PASSWORD_PROD}
      --masterauth ${REDIS_PASSWORD_PROD}
      --appendonly yes
    volumes:
      - redis_prod_replica_2_data:/data
    networks:
      - atlasmesh-prod-network
    depends_on:
      - redis-master
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Production Kafka Cluster
  zookeeper-ensemble:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: atlasmesh-zookeeper-ensemble-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
    volumes:
      - zookeeper_prod_data:/var/lib/zookeeper/data
      - zookeeper_prod_logs:/var/lib/zookeeper/log
    networks:
      - atlasmesh-prod-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure

  kafka-cluster:
    image: confluentinc/cp-kafka:7.4.0
    container_name: atlasmesh-kafka-cluster-prod
    depends_on:
      - zookeeper-ensemble
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-ensemble:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-cluster:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_LOG_RETENTION_HOURS: 720  # 30 days
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1GB
      KAFKA_NUM_PARTITIONS: 24
      KAFKA_COMPRESSION_TYPE: lz4
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_JVM_PERFORMANCE_OPTS: "-Xmx6g -Xms6g"
    volumes:
      - kafka_prod_data:/var/lib/kafka/data
    ports:
      - "9097:9092"
    networks:
      - atlasmesh-prod-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
      restart_policy:
        condition: on-failure

  # Production Load Balancer with SSL Termination
  nginx-lb:
    image: nginx:1.25-alpine
    container_name: atlasmesh-nginx-lb-prod
    volumes:
      - ../../config/nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ../../config/nginx/ssl-prod:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - atlasmesh-prod-network
    depends_on:
      - api-gateway-1
      - api-gateway-2
      - api-gateway-3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway Cluster
  api-gateway-1:
    image: atlasmesh/api-gateway:${VERSION:-latest}
    container_name: atlasmesh-api-gateway-1-prod
    environment:
      ENVIRONMENT: production
      HTTP_PORT: 8080
      GRPC_PORT: 9080
      POSTGRES_URL: postgres://atlasmesh_prod:${POSTGRES_PASSWORD_PROD}@postgres-primary:5432/atlasmesh_policy
      POSTGRES_READ_REPLICA_URL: postgres://atlasmesh_prod:${POSTGRES_PASSWORD_PROD}@postgres-replica-1:5432/atlasmesh_policy
      REDIS_URL: redis://:${REDIS_PASSWORD_PROD}@redis-master:6379
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: warn
      RATE_LIMIT_ENABLED: 'true'
      RATE_LIMIT_RPS: 1000
      CORS_ENABLED: 'false'  # Handled by nginx
      METRICS_ENABLED: 'true'
      CIRCUIT_BREAKER_ENABLED: 'true'
      CIRCUIT_BREAKER_THRESHOLD: 5
      CIRCUIT_BREAKER_TIMEOUT: 60s
      TLS_ENABLED: 'true'
      TLS_CERT_PATH: /etc/ssl/certs/atlasmesh.crt
      TLS_KEY_PATH: /etc/ssl/private/atlasmesh.key
    volumes:
      - ../../config/ssl/prod:/etc/ssl:ro
    networks:
      - atlasmesh-prod-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  api-gateway-2:
    image: atlasmesh/api-gateway:${VERSION:-latest}
    container_name: atlasmesh-api-gateway-2-prod
    environment:
      ENVIRONMENT: production
      HTTP_PORT: 8080
      GRPC_PORT: 9080
      POSTGRES_URL: postgres://atlasmesh_prod:${POSTGRES_PASSWORD_PROD}@postgres-primary:5432/atlasmesh_policy
      POSTGRES_READ_REPLICA_URL: postgres://atlasmesh_prod:${POSTGRES_PASSWORD_PROD}@postgres-replica-2:5432/atlasmesh_policy
      REDIS_URL: redis://:${REDIS_PASSWORD_PROD}@redis-master:6379
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: warn
      RATE_LIMIT_ENABLED: 'true'
      RATE_LIMIT_RPS: 1000
      CORS_ENABLED: 'false'
      METRICS_ENABLED: 'true'
      CIRCUIT_BREAKER_ENABLED: 'true'
      CIRCUIT_BREAKER_THRESHOLD: 5
      CIRCUIT_BREAKER_TIMEOUT: 60s
      TLS_ENABLED: 'true'
      TLS_CERT_PATH: /etc/ssl/certs/atlasmesh.crt
      TLS_KEY_PATH: /etc/ssl/private/atlasmesh.key
    volumes:
      - ../../config/ssl/prod:/etc/ssl:ro
    networks:
      - atlasmesh-prod-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
      restart_policy:
        condition: on-failure

  api-gateway-3:
    image: atlasmesh/api-gateway:${VERSION:-latest}
    container_name: atlasmesh-api-gateway-3-prod
    environment:
      ENVIRONMENT: production
      HTTP_PORT: 8080
      GRPC_PORT: 9080
      POSTGRES_URL: postgres://atlasmesh_prod:${POSTGRES_PASSWORD_PROD}@postgres-primary:5432/atlasmesh_policy
      POSTGRES_READ_REPLICA_URL: postgres://atlasmesh_prod:${POSTGRES_PASSWORD_PROD}@postgres-replica-1:5432/atlasmesh_policy
      REDIS_URL: redis://:${REDIS_PASSWORD_PROD}@redis-master:6379
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: warn
      RATE_LIMIT_ENABLED: 'true'
      RATE_LIMIT_RPS: 1000
      CORS_ENABLED: 'false'
      METRICS_ENABLED: 'true'
      CIRCUIT_BREAKER_ENABLED: 'true'
      CIRCUIT_BREAKER_THRESHOLD: 5
      CIRCUIT_BREAKER_TIMEOUT: 60s
      TLS_ENABLED: 'true'
      TLS_CERT_PATH: /etc/ssl/certs/atlasmesh.crt
      TLS_KEY_PATH: /etc/ssl/private/atlasmesh.key
    volumes:
      - ../../config/ssl/prod:/etc/ssl:ro
    networks:
      - atlasmesh-prod-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
      restart_policy:
        condition: on-failure

  # Enterprise Security Services
  vault-cluster:
    image: hashicorp/vault:1.15
    container_name: atlasmesh-vault-cluster-prod
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_LOCAL_CONFIG: |
        {
          "backend": {
            "consul": {
              "address": "consul:8500",
              "path": "vault/"
            }
          },
          "listener": {
            "tcp": {
              "address": "0.0.0.0:8200",
              "tls_disable": false,
              "tls_cert_file": "/vault/tls/vault.crt",
              "tls_key_file": "/vault/tls/vault.key"
            }
          },
          "default_lease_ttl": "168h",
          "max_lease_ttl": "720h",
          "ui": true,
          "api_addr": "https://vault.atlasmesh.ai:8200",
          "cluster_addr": "https://vault.atlasmesh.ai:8201"
        }
    volumes:
      - vault_prod_data:/vault/data
      - ../../config/vault/tls:/vault/tls:ro
      - ../../config/vault/policies:/vault/policies:ro
    ports:
      - "8202:8200"
      - "8203:8201"
    networks:
      - atlasmesh-prod-network
    cap_add:
      - IPC_LOCK
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure

  # Production Monitoring Stack
  prometheus-cluster:
    image: prom/prometheus:v2.47.0
    container_name: atlasmesh-prometheus-cluster-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=100GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=https://prometheus.atlasmesh.ai'
      - '--alertmanager.notification-queue-capacity=10000'
    volumes:
      - ../../monitoring/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ../../monitoring/prometheus/rules-prod:/etc/prometheus/rules:ro
      - prometheus_prod_data:/prometheus
    ports:
      - "9093:9090"
    networks:
      - atlasmesh-prod-network
    deploy:
      resources:
        limits:
          memory: 16G
          cpus: '4.0'
        reservations:
          memory: 8G
          cpus: '2.0'
      restart_policy:
        condition: on-failure

  alertmanager-cluster:
    image: prom/alertmanager:v0.26.0
    container_name: atlasmesh-alertmanager-cluster-prod
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alertmanager.atlasmesh.ai'
      - '--cluster.listen-address=0.0.0.0:9094'
      - '--cluster.advertise-address=alertmanager-cluster:9094'
    volumes:
      - ../../monitoring/alertmanager/alertmanager-prod.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_prod_data:/alertmanager
    ports:
      - "9095:9093"
      - "9096:9094"
    networks:
      - atlasmesh-prod-network
    depends_on:
      - prometheus-cluster
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure

  grafana-enterprise:
    image: grafana/grafana-enterprise:10.1.0
    container_name: atlasmesh-grafana-enterprise-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_admin_password
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel,grafana-worldmap-panel
      GF_SERVER_DOMAIN: grafana.atlasmesh.ai
      GF_SERVER_ROOT_URL: https://grafana.atlasmesh.ai
      GF_SMTP_ENABLED: 'true'
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD_FILE: /run/secrets/smtp_password
      GF_ALERTING_ENABLED: 'true'
      GF_UNIFIED_ALERTING_ENABLED: 'true'
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres-primary:5432
      GF_DATABASE_NAME: grafana_prod
      GF_DATABASE_USER: grafana_prod
      GF_DATABASE_PASSWORD_FILE: /run/secrets/grafana_db_password
      GF_SESSION_PROVIDER: redis
      GF_SESSION_PROVIDER_CONFIG: addr=redis-master:6379,pool_size=100,db=grafana
      GF_SECURITY_SECRET_KEY_FILE: /run/secrets/grafana_secret_key
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ../../monitoring/grafana/dashboards-prod:/etc/grafana/provisioning/dashboards:ro
      - ../../monitoring/grafana/datasources-prod.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ../../monitoring/grafana/alerting-prod:/etc/grafana/provisioning/alerting:ro
    secrets:
      - grafana_admin_password
      - grafana_db_password
      - grafana_secret_key
      - smtp_password
    ports:
      - "3004:3000"
    networks:
      - atlasmesh-prod-network
    depends_on:
      - prometheus-cluster
      - postgres-primary
      - redis-master
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
      restart_policy:
        condition: on-failure

  # Backup and Disaster Recovery
  backup-service:
    image: atlasmesh/backup-service:${VERSION:-latest}
    container_name: atlasmesh-backup-service-prod
    environment:
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      POSTGRES_URL: postgres://atlasmesh_prod:${POSTGRES_PASSWORD_PROD}@postgres-primary:5432/atlasmesh_prod
      S3_BACKUP_BUCKET: ${S3_BACKUP_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      RETENTION_DAYS: 90
      ENCRYPTION_KEY_FILE: /run/secrets/backup_encryption_key
    volumes:
      - postgres_prod_backups:/backups
      - backup_prod_logs:/var/log/backup
    secrets:
      - backup_encryption_key
    networks:
      - atlasmesh-prod-network
    depends_on:
      - postgres-primary
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure

# Docker Secrets for Production Security
secrets:
  postgres_password:
    external: true
  postgres_replication_password:
    external: true
  grafana_admin_password:
    external: true
  grafana_db_password:
    external: true
  grafana_secret_key:
    external: true
  smtp_password:
    external: true
  backup_encryption_key:
    external: true

volumes:
  postgres_prod_primary_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/postgres/primary
  postgres_prod_replica_1_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/postgres/replica1
  postgres_prod_replica_2_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/postgres/replica2
  postgres_prod_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /backups/atlasmesh/postgres
  redis_prod_master_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/redis/master
  redis_prod_replica_1_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/redis/replica1
  redis_prod_replica_2_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/redis/replica2
  zookeeper_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/zookeeper
  zookeeper_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /logs/atlasmesh/zookeeper
  kafka_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/kafka
  vault_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/vault
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/prometheus
  alertmanager_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/alertmanager
  grafana_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/atlasmesh/grafana
  nginx_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /logs/atlasmesh/nginx
  backup_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /logs/atlasmesh/backup

networks:
  atlasmesh-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
    driver_opts:
      com.docker.network.bridge.name: atlasmesh-prod-br0
