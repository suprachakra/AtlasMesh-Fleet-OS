apiVersion: apps/v1
kind: Deployment
metadata:
  name: control-center-ui
  namespace: atlasmesh-fleet-os
  labels:
    app.kubernetes.io/name: control-center-ui
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: atlasmesh-fleet-os
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: control-center-ui
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: control-center-ui
        app.kubernetes.io/component: frontend
        app.kubernetes.io/part-of: atlasmesh-fleet-os
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: control-center-ui
        image: atlasmesh/control-center-ui:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        # Map Configuration
        - name: REACT_APP_DEFAULT_MAP_PROVIDER
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: DEFAULT_MAP_PROVIDER
        - name: REACT_APP_DEFAULT_MAP_CENTER_LAT
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: DEFAULT_MAP_CENTER_LAT
        - name: REACT_APP_DEFAULT_MAP_CENTER_LNG
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: DEFAULT_MAP_CENTER_LNG
        - name: REACT_APP_DEFAULT_MAP_ZOOM
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: DEFAULT_MAP_ZOOM
        
        # API Configuration
        - name: REACT_APP_API_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: API_BASE_URL
        - name: REACT_APP_WS_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: WS_BASE_URL
        
        # API Keys
        - name: REACT_APP_GOOGLE_MAPS_API_KEY
          valueFrom:
            secretKeyRef:
              name: atlasmesh-api-keys
              key: GOOGLE_MAPS_API_KEY
        - name: REACT_APP_MAPBOX_API_KEY
          valueFrom:
            secretKeyRef:
              name: atlasmesh-api-keys
              key: MAPBOX_API_KEY
        
        # Feature Flags
        - name: REACT_APP_ENABLE_CLUSTERING
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: ENABLE_CLUSTERING
        - name: REACT_APP_ENABLE_REAL_TIME_UPDATES
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: ENABLE_REAL_TIME_UPDATES
        - name: REACT_APP_ENABLE_VEHICLE_TRAILS
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: ENABLE_VEHICLE_TRAILS
        
        # Performance Settings
        - name: REACT_APP_MAP_UPDATE_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: MAP_UPDATE_INTERVAL
        - name: REACT_APP_MAX_VEHICLES_ON_MAP
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: MAX_VEHICLES_ON_MAP
        
        # Development Settings
        - name: REACT_APP_DEBUG_MODE
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: DEBUG_MODE
        - name: REACT_APP_MOCK_DATA
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: MOCK_DATA
        - name: REACT_APP_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: LOG_LEVEL
        
        # Time Zone
        - name: TZ
          valueFrom:
            configMapKeyRef:
              name: atlasmesh-app-config
              key: TZ
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Volume Mounts for temporary files
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      
      # Pod Security Context
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      
      # Node Selection
      nodeSelector:
        kubernetes.io/os: linux
      
      # Tolerations for spot instances
      tolerations:
      - key: "node.kubernetes.io/spot"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      # Anti-affinity to spread pods across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - control-center-ui
              topologyKey: kubernetes.io/hostname
      
      # Restart Policy
      restartPolicy: Always
      
      # Service Account
      serviceAccountName: control-center-ui
      
      # DNS Policy
      dnsPolicy: ClusterFirst
      
      # Image Pull Secrets
      imagePullSecrets:
      - name: atlasmesh-registry-secret

---
apiVersion: v1
kind: Service
metadata:
  name: control-center-ui-service
  namespace: atlasmesh-fleet-os
  labels:
    app.kubernetes.io/name: control-center-ui
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: atlasmesh-fleet-os
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: control-center-ui
    app.kubernetes.io/component: frontend

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: control-center-ui
  namespace: atlasmesh-fleet-os
  labels:
    app.kubernetes.io/name: control-center-ui
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: atlasmesh-fleet-os
automountServiceAccountToken: false
