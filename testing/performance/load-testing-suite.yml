# AtlasMesh Fleet OS - Performance & Load Testing Suite
# Load testing for 100k+ vehicles, stress testing, performance budgets enforcement

version: '3.8'

services:
  # K6 Load Testing Engine
  k6-load-tester:
    image: grafana/k6:latest
    container_name: k6-load-tester
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://prometheus:9090/api/v1/write
      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
    volumes:
      - ./k6/scripts:/scripts
      - ./k6/data:/data
      - ./k6/results:/results
      - ./k6/config:/config
    networks:
      - performance-testing
    command: >
      sh -c "
        echo 'K6 Load Testing Engine Ready' &&
        tail -f /dev/null
      "
    restart: unless-stopped

  # Artillery.js Load Testing
  artillery-tester:
    image: node:18-alpine
    container_name: artillery-tester
    working_dir: /app
    environment:
      - NODE_ENV=production
    volumes:
      - ./artillery:/app
      - ./artillery/scripts:/app/scripts
      - ./artillery/results:/app/results
    networks:
      - performance-testing
    command: >
      sh -c "
        npm install -g artillery &&
        echo 'Artillery Load Testing Engine Ready' &&
        tail -f /dev/null
      "
    restart: unless-stopped

  # JMeter Load Testing
  jmeter-tester:
    image: justb4/jmeter:5.5
    container_name: jmeter-tester
    environment:
      - JVM_ARGS=-Xms1g -Xmx4g
    volumes:
      - ./jmeter/test-plans:/test-plans
      - ./jmeter/results:/results
      - ./jmeter/data:/data
    networks:
      - performance-testing
    restart: unless-stopped

  # Locust Load Testing (Python-based)
  locust-master:
    image: locustio/locust:2.17.0
    container_name: locust-master
    ports:
      - "8089:8089"
    environment:
      - LOCUST_MODE=master
      - LOCUST_MASTER_BIND_HOST=0.0.0.0
      - LOCUST_MASTER_BIND_PORT=5557
    volumes:
      - ./locust:/mnt/locust
    networks:
      - performance-testing
    command: >
      -f /mnt/locust/fleet_load_test.py 
      --master 
      --web-host=0.0.0.0 
      --web-port=8089
    restart: unless-stopped

  locust-worker-1:
    image: locustio/locust:2.17.0
    container_name: locust-worker-1
    environment:
      - LOCUST_MODE=worker
      - LOCUST_MASTER_HOST=locust-master
      - LOCUST_MASTER_PORT=5557
    volumes:
      - ./locust:/mnt/locust
    networks:
      - performance-testing
    depends_on:
      - locust-master
    command: >
      -f /mnt/locust/fleet_load_test.py 
      --worker 
      --master-host=locust-master 
      --master-port=5557
    restart: unless-stopped
    deploy:
      replicas: 3

  # Performance Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus-perf
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    networks:
      - performance-testing
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  grafana-perf:
    image: grafana/grafana:10.1.0
    container_name: grafana-perf
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_perf_2024!
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-perf-data:/var/lib/grafana
    networks:
      - performance-testing
    depends_on:
      - prometheus
    restart: unless-stopped

  # InfluxDB for Time Series Metrics
  influxdb:
    image: influxdb:2.7-alpine
    container_name: influxdb-perf
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin_password_2024!
      - DOCKER_INFLUXDB_INIT_ORG=atlasmesh
      - DOCKER_INFLUXDB_INIT_BUCKET=performance_metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=atlasmesh_performance_token_2024
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - performance-testing
    restart: unless-stopped

  # Performance Test Orchestrator
  test-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.test-orchestrator
    container_name: test-orchestrator
    environment:
      - FLEET_API_BASE_URL=${FLEET_API_BASE_URL:-http://fleet-manager:8080}
      - VEHICLE_GATEWAY_URL=${VEHICLE_GATEWAY_URL:-http://vehicle-gateway:8080}
      - POLICY_ENGINE_URL=${POLICY_ENGINE_URL:-http://policy-engine:8080}
      - TARGET_VEHICLES=${TARGET_VEHICLES:-100000}
      - RAMP_UP_DURATION=${RAMP_UP_DURATION:-300}  # 5 minutes
      - TEST_DURATION=${TEST_DURATION:-1800}       # 30 minutes
      - PROMETHEUS_URL=http://prometheus:9090
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=atlasmesh_performance_token_2024
      - INFLUXDB_ORG=atlasmesh
      - INFLUXDB_BUCKET=performance_metrics
    volumes:
      - ./orchestrator/config:/app/config
      - ./orchestrator/scenarios:/app/scenarios
      - ./orchestrator/reports:/app/reports
    networks:
      - performance-testing
    ports:
      - "8087:8080"
    depends_on:
      - prometheus
      - influxdb
    restart: unless-stopped

  # Stress Testing Service
  stress-tester:
    build:
      context: .
      dockerfile: Dockerfile.stress-tester
    container_name: stress-tester
    environment:
      - TARGET_SERVICES=${TARGET_SERVICES:-fleet-manager,vehicle-gateway,policy-engine}
      - STRESS_SCENARIOS=${STRESS_SCENARIOS:-cpu_spike,memory_leak,network_partition,database_overload}
      - CHAOS_ENGINEERING_ENABLED=${CHAOS_ENGINEERING_ENABLED:-true}
    volumes:
      - ./stress-testing/scenarios:/app/scenarios
      - ./stress-testing/results:/app/results
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - performance-testing
    ports:
      - "8088:8080"
    restart: unless-stopped
    privileged: true

  # Performance Budget Enforcer
  budget-enforcer:
    build:
      context: .
      dockerfile: Dockerfile.budget-enforcer
    container_name: budget-enforcer
    environment:
      - PERFORMANCE_BUDGETS_CONFIG=/app/config/performance_budgets.yml
      - PROMETHEUS_URL=http://prometheus:9090
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - ALERT_EMAIL=${ALERT_EMAIL}
    volumes:
      - ./budget-enforcer/config:/app/config
      - ./budget-enforcer/reports:/app/reports
    networks:
      - performance-testing
    ports:
      - "8089:8080"
    depends_on:
      - prometheus
    restart: unless-stopped

  # Bottleneck Analyzer
  bottleneck-analyzer:
    build:
      context: .
      dockerfile: Dockerfile.bottleneck-analyzer
    container_name: bottleneck-analyzer
    environment:
      - ANALYSIS_INTERVAL=${ANALYSIS_INTERVAL:-60}  # seconds
      - PROMETHEUS_URL=http://prometheus:9090
      - JAEGER_URL=${JAEGER_URL:-http://jaeger:16686}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://elasticsearch:9200}
    volumes:
      - ./bottleneck-analyzer/config:/app/config
      - ./bottleneck-analyzer/analysis:/app/analysis
      - ./bottleneck-analyzer/reports:/app/reports
    networks:
      - performance-testing
    ports:
      - "8090:8080"
    depends_on:
      - prometheus
    restart: unless-stopped

  # Load Generator for Vehicle Simulation
  vehicle-simulator:
    build:
      context: .
      dockerfile: Dockerfile.vehicle-simulator
    container_name: vehicle-simulator
    environment:
      - SIMULATION_MODE=${SIMULATION_MODE:-realistic}  # realistic, stress, burst
      - VEHICLE_COUNT=${VEHICLE_COUNT:-100000}
      - TELEMETRY_FREQUENCY=${TELEMETRY_FREQUENCY:-5}  # seconds
      - FLEET_API_URL=http://fleet-manager:8080
      - VEHICLE_GATEWAY_URL=http://vehicle-gateway:8080
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
      - REDIS_URL=${REDIS_URL:-redis:6379}
    volumes:
      - ./vehicle-simulator/config:/app/config
      - ./vehicle-simulator/data:/app/data
      - ./vehicle-simulator/logs:/app/logs
    networks:
      - performance-testing
    ports:
      - "8091:8080"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Real-time Performance Dashboard
  performance-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.performance-dashboard
    container_name: performance-dashboard
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana-perf:3000
      - INFLUXDB_URL=http://influxdb:8086
      - K6_RESULTS_PATH=/results
      - LOCUST_RESULTS_PATH=/locust-results
    volumes:
      - ./dashboard/config:/app/config
      - ./k6/results:/results:ro
      - ./locust/results:/locust-results:ro
    networks:
      - performance-testing
    ports:
      - "8092:8080"
    depends_on:
      - prometheus
      - grafana-perf
      - influxdb
    restart: unless-stopped

  # Test Data Generator
  test-data-generator:
    build:
      context: .
      dockerfile: Dockerfile.test-data-generator
    container_name: test-data-generator
    environment:
      - DATA_VOLUME=${DATA_VOLUME:-large}  # small, medium, large, xlarge
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-atlasmesh_fleet_os}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
    volumes:
      - ./test-data-generator/templates:/app/templates
      - ./test-data-generator/output:/app/output
    networks:
      - performance-testing
    ports:
      - "8093:8080"
    restart: unless-stopped

volumes:
  prometheus-data:
    driver: local
  grafana-perf-data:
    driver: local
  influxdb-data:
    driver: local
  influxdb-config:
    driver: local

networks:
  performance-testing:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# Performance Testing Profiles
x-performance-profiles:
  - &load-test-profile
    name: "Load Test"
    description: "Standard load testing for normal operations"
    target_rps: 1000
    duration: "30m"
    ramp_up: "5m"
    
  - &stress-test-profile
    name: "Stress Test"
    description: "Stress testing to find breaking points"
    target_rps: 5000
    duration: "15m"
    ramp_up: "2m"
    
  - &spike-test-profile
    name: "Spike Test"
    description: "Sudden traffic spikes simulation"
    target_rps: 10000
    duration: "5m"
    ramp_up: "30s"
    
  - &endurance-test-profile
    name: "Endurance Test"
    description: "Long-running stability testing"
    target_rps: 500
    duration: "4h"
    ramp_up: "10m"
