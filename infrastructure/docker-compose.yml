# AtlasMesh Fleet OS - Core Infrastructure Stack
#
# INFRASTRUCTURE AS CODE: Local development environment for AtlasMesh Fleet OS
# Provides all foundational services with proper health checks and networking
#
# DEPLOYMENT: For local development only - NOT for production use
# SECURITY: Default passwords must be changed for any non-local deployment
# PERF: Resource limits set for development workloads
# 
# BLAST RADIUS: Local development only - no external dependencies
# ROLLBACK: docker-compose down && docker-compose up to reset state
# STATE DRIFT: Volumes persist data between restarts - use docker-compose down -v to reset

version: '3.8'

services:
  # PostgreSQL - Primary Database
  # INTEGRATION CONTRACT: Fleet/vehicle/policy data storage
  # PERF: Connection pooling via pgbouncer for production deployments
  postgresql:
    image: postgres:15-alpine
    container_name: atlasmesh-postgresql
    environment:
      POSTGRES_DB: atlasmesh_fleet
      POSTGRES_USER: atlasmesh
      POSTGRES_PASSWORD: changeme_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./postgresql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atlasmesh -d atlasmesh_fleet"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - atlasmesh

  # TimescaleDB - Time Series Data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: atlasmesh-timescaledb
    environment:
      POSTGRES_DB: atlasmesh_telemetry
      POSTGRES_USER: atlasmesh
      POSTGRES_PASSWORD: changeme_dev
    ports:
      - "5433:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atlasmesh -d atlasmesh_telemetry"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - atlasmesh

  # Redis - Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: atlasmesh-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - atlasmesh

  # Kafka - Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: atlasmesh-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - atlasmesh

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: atlasmesh-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - atlasmesh

  # Schema Registry - Avro Schema Management
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: atlasmesh-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - atlasmesh

  # ClickHouse - Analytics Database
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: atlasmesh-clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: atlasmesh_analytics
      CLICKHOUSE_USER: atlasmesh
      CLICKHOUSE_PASSWORD: changeme_dev
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - atlasmesh

  # MinIO - Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: atlasmesh-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: atlasmesh
      MINIO_ROOT_PASSWORD: changeme_dev
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - atlasmesh

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: atlasmesh-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - atlasmesh

  # Grafana - Dashboards and Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: atlasmesh-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: changeme_dev
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - atlasmesh

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: atlasmesh-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP agent
    environment:
      COLLECTOR_OTLP_ENABLED: 'true'
      COLLECTOR_ZIPKIN_HOST_PORT: ':9411'
    volumes:
      - jaeger_data:/tmp
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - atlasmesh

  # NATS - Lightweight Messaging
  nats:
    image: nats:2.10-alpine
    container_name: atlasmesh-nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
      - "6222:6222"  # Cluster connections
    command: ["-js", "-m", "8222"]
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - atlasmesh

  # Vault - Secrets Management
  vault:
    image: vault:1.15.0
    container_name: atlasmesh-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: changeme_dev
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - atlasmesh

  # Kafka UI - Kafka Management Interface
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: atlasmesh-kafka-ui
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    networks:
      - atlasmesh

  # PgAdmin - PostgreSQL Management Interface
  pgadmin:
    image: dpage/pgadmin4:7.8
    container_name: atlasmesh-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@atlasmesh.ae
      PGADMIN_DEFAULT_PASSWORD: changeme_dev
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - atlasmesh

volumes:
  postgresql_data:
  timescaledb_data:
  redis_data:
  zookeeper_data:
  kafka_data:
  clickhouse_data:
  minio_data:
  prometheus_data:
  grafana_data:
  jaeger_data:
  nats_data:
  vault_data:
  pgadmin_data:

networks:
  atlasmesh:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
