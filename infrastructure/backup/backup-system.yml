# AtlasMesh Fleet OS - Comprehensive Backup & Recovery System
# Automated backups, point-in-time recovery, cross-region disaster recovery, RTO/RPO testing

version: '3.8'

services:
  # PostgreSQL Backup Service
  postgres-backup:
    image: postgres:15-alpine
    container_name: postgres-backup
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-atlasmesh_fleet_os}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${S3_BACKUP_BUCKET:-atlasmesh-backups}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-me-south-1}
    volumes:
      - ./scripts/postgres-backup.sh:/usr/local/bin/postgres-backup.sh
      - ./scripts/postgres-restore.sh:/usr/local/bin/postgres-restore.sh
      - backup-data:/backups
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backup-network
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache aws-cli docker-cli &&
        chmod +x /usr/local/bin/postgres-backup.sh &&
        chmod +x /usr/local/bin/postgres-restore.sh &&
        # Run initial backup
        /usr/local/bin/postgres-backup.sh &&
        # Setup cron for automated backups
        echo '0 2 * * * /usr/local/bin/postgres-backup.sh' | crontab - &&
        echo '0 */6 * * * /usr/local/bin/postgres-backup.sh incremental' | crontab - &&
        crond -f
      "

  # Redis Backup Service
  redis-backup:
    image: redis:7.2-alpine
    container_name: redis-backup
    environment:
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${S3_BACKUP_BUCKET:-atlasmesh-backups}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-me-south-1}
    volumes:
      - ./scripts/redis-backup.sh:/usr/local/bin/redis-backup.sh
      - ./scripts/redis-restore.sh:/usr/local/bin/redis-restore.sh
      - backup-data:/backups
    networks:
      - backup-network
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache aws-cli &&
        chmod +x /usr/local/bin/redis-backup.sh &&
        chmod +x /usr/local/bin/redis-restore.sh &&
        # Run initial backup
        /usr/local/bin/redis-backup.sh &&
        # Setup cron for automated backups
        echo '30 2 * * * /usr/local/bin/redis-backup.sh' | crontab - &&
        echo '30 */4 * * * /usr/local/bin/redis-backup.sh incremental' | crontab - &&
        crond -f
      "

  # Application Data Backup Service
  app-backup:
    image: alpine:3.18
    container_name: app-backup
    environment:
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${S3_BACKUP_BUCKET:-atlasmesh-backups}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-me-south-1}
      - ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    volumes:
      - ./scripts/app-backup.sh:/usr/local/bin/app-backup.sh
      - ./scripts/app-restore.sh:/usr/local/bin/app-restore.sh
      - backup-data:/backups
      - app-data:/app-data:ro
      - config-data:/config-data:ro
      - logs-data:/logs-data:ro
    networks:
      - backup-network
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache aws-cli tar gzip openssl &&
        chmod +x /usr/local/bin/app-backup.sh &&
        chmod +x /usr/local/bin/app-restore.sh &&
        # Run initial backup
        /usr/local/bin/app-backup.sh &&
        # Setup cron for automated backups
        echo '0 3 * * * /usr/local/bin/app-backup.sh' | crontab - &&
        echo '0 */8 * * * /usr/local/bin/app-backup.sh incremental' | crontab - &&
        crond -f
      "

  # Backup Monitoring Service
  backup-monitor:
    build:
      context: .
      dockerfile: Dockerfile.backup-monitor
    container_name: backup-monitor
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - S3_BUCKET=${S3_BACKUP_BUCKET:-atlasmesh-backups}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-me-south-1}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT:-587}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - ALERT_EMAIL=${ALERT_EMAIL}
    volumes:
      - backup-data:/backups:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - backup-network
    ports:
      - "8090:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cross-Region Replication Service
  cross-region-sync:
    image: alpine:3.18
    container_name: cross-region-sync
    environment:
      - PRIMARY_REGION=${AWS_DEFAULT_REGION:-me-south-1}
      - DR_REGION=${DR_REGION:-eu-west-1}
      - S3_BUCKET=${S3_BACKUP_BUCKET:-atlasmesh-backups}
      - DR_S3_BUCKET=${DR_S3_BUCKET:-atlasmesh-backups-dr}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - SYNC_FREQUENCY=${SYNC_FREQUENCY:-4h}
    volumes:
      - ./scripts/cross-region-sync.sh:/usr/local/bin/cross-region-sync.sh
      - backup-data:/backups:ro
    networks:
      - backup-network
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache aws-cli &&
        chmod +x /usr/local/bin/cross-region-sync.sh &&
        # Run initial sync
        /usr/local/bin/cross-region-sync.sh &&
        # Setup cron for automated sync
        echo '0 */4 * * * /usr/local/bin/cross-region-sync.sh' | crontab - &&
        crond -f
      "

  # Point-in-Time Recovery Service
  pitr-service:
    build:
      context: .
      dockerfile: Dockerfile.pitr-service
    container_name: pitr-service
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-atlasmesh_fleet_os}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - S3_BUCKET=${S3_BACKUP_BUCKET:-atlasmesh-backups}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-me-south-1}
    volumes:
      - backup-data:/backups
      - pitr-data:/pitr
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backup-network
    ports:
      - "8091:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Disaster Recovery Orchestrator
  dr-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.dr-orchestrator
    container_name: dr-orchestrator
    environment:
      - PRIMARY_REGION=${AWS_DEFAULT_REGION:-me-south-1}
      - DR_REGION=${DR_REGION:-eu-west-1}
      - RTO_TARGET_MINUTES=${RTO_TARGET_MINUTES:-15}
      - RPO_TARGET_MINUTES=${RPO_TARGET_MINUTES:-5}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - S3_BUCKET=${S3_BACKUP_BUCKET:-atlasmesh-backups}
      - DR_S3_BUCKET=${DR_S3_BUCKET:-atlasmesh-backups-dr}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - KUBERNETES_NAMESPACE=${KUBERNETES_NAMESPACE:-atlasmesh}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - ALERT_EMAIL=${ALERT_EMAIL}
    volumes:
      - backup-data:/backups
      - dr-data:/dr
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.kube:/root/.kube:ro
    networks:
      - backup-network
    ports:
      - "8092:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RTO/RPO Testing Service
  rto-rpo-tester:
    build:
      context: .
      dockerfile: Dockerfile.rto-rpo-tester
    container_name: rto-rpo-tester
    environment:
      - TEST_SCHEDULE=${TEST_SCHEDULE:-0 1 * * 0} # Weekly on Sunday at 1 AM
      - RTO_TARGET_MINUTES=${RTO_TARGET_MINUTES:-15}
      - RPO_TARGET_MINUTES=${RPO_TARGET_MINUTES:-5}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - TEST_DATABASE=${TEST_DATABASE:-atlasmesh_fleet_os_test}
      - S3_BUCKET=${S3_BACKUP_BUCKET:-atlasmesh-backups}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-me-south-1}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - ALERT_EMAIL=${ALERT_EMAIL}
    volumes:
      - backup-data:/backups:ro
      - test-data:/test-data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backup-network
    ports:
      - "8093:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup Verification Service
  backup-verifier:
    image: alpine:3.18
    container_name: backup-verifier
    environment:
      - S3_BUCKET=${S3_BACKUP_BUCKET:-atlasmesh-backups}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-me-south-1}
      - VERIFICATION_SCHEDULE=${VERIFICATION_SCHEDULE:-0 4 * * *} # Daily at 4 AM
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - ALERT_EMAIL=${ALERT_EMAIL}
    volumes:
      - ./scripts/backup-verifier.sh:/usr/local/bin/backup-verifier.sh
      - backup-data:/backups
      - verification-data:/verification
    networks:
      - backup-network
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache aws-cli curl postgresql-client redis &&
        chmod +x /usr/local/bin/backup-verifier.sh &&
        # Run initial verification
        /usr/local/bin/backup-verifier.sh &&
        # Setup cron for automated verification
        echo '0 4 * * * /usr/local/bin/backup-verifier.sh' | crontab - &&
        crond -f
      "

volumes:
  backup-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/atlasmesh/backups
  app-data:
    driver: local
  config-data:
    driver: local
  logs-data:
    driver: local
  pitr-data:
    driver: local
  dr-data:
    driver: local
  test-data:
    driver: local
  verification-data:
    driver: local

networks:
  backup-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# Health check for the entire backup system
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s
