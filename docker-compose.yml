version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: atlasmesh-postgres
    environment:
      POSTGRES_DB: atlasmesh
      POSTGRES_USER: atlasmesh
      POSTGRES_PASSWORD: atlasmesh_dev_password
      POSTGRES_MULTIPLE_DATABASES: atlasmesh_policy,atlasmesh_trips,atlasmesh_dispatch,atlasmesh_routing,atlasmesh_fleet
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
    ports:
      - "5432:5432"
    networks:
      - atlasmesh-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atlasmesh"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: atlasmesh-redis
    command: redis-server --appendonly yes --requirepass atlasmesh_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - atlasmesh-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: atlasmesh-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - atlasmesh-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: atlasmesh-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "29092:29092"
    networks:
      - atlasmesh-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: atlasmesh-schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "8081:8081"
    volumes:
      - schema_registry_data:/var/lib/schema-registry
      - ./services/schema-registry/schemas:/etc/schema-registry/schemas:ro
    networks:
      - atlasmesh-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ClickHouse (Hot Path Analytics)
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: atlasmesh-clickhouse
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    environment:
      CLICKHOUSE_DB: atlasmesh_telemetry
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: clickhouse_password
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
      - ./services/telemetry-ingestion/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - atlasmesh-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (Cold Path Storage)
  minio:
    image: minio/minio:RELEASE.2023-09-04T19-57-37Z
    container_name: atlasmesh-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    networks:
      - atlasmesh-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Neo4j (Graph Database for Lineage)
  neo4j:
    image: neo4j:5.11-community
    container_name: atlasmesh-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      NEO4J_AUTH: neo4j/neo4j_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - atlasmesh-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "neo4j_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Data Lineage Service
  data-lineage:
    build:
      context: ./services/data-lineage
      dockerfile: Dockerfile
    container_name: atlasmesh-data-lineage
    ports:
      - "8083:8080"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=neo4j_password
      - KAFKA_BROKERS=kafka:9092
      - LOG_LEVEL=INFO
    networks:
      - atlasmesh-network
    depends_on:
      - neo4j
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HashiCorp Vault (Secrets Management)
  vault:
    image: hashicorp/vault:1.15
    container_name: atlasmesh-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: atlasmesh-root-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./security/vault/config:/vault/config:ro
      - ./security/vault/policies:/vault/policies:ro
    networks:
      - atlasmesh-network
    command: vault server -dev -dev-root-token-id=atlasmesh-root-token -dev-listen-address=0.0.0.0:8200
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: atlasmesh-auth-service
    ports:
      - "8084:8080"
    environment:
      - DATABASE_URL=postgres://atlasmesh:atlasmesh_dev_password@postgres:5432/atlasmesh_auth
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=atlasmesh-root-token
      - JWT_ISSUER=atlasmesh-auth
      - JWT_AUDIENCE=atlasmesh-fleet-os
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    networks:
      - atlasmesh-network
    depends_on:
      - postgres
      - vault
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Feature Flags Service
  feature-flags:
    build:
      context: ./services/feature-flags
      dockerfile: Dockerfile
    container_name: atlasmesh-feature-flags
    ports:
      - "8095:8080"
      - "9095:9090"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - HTTP_PORT=8080
      - GRPC_PORT=9090
      - REDIS_ADDRESS=redis:6379
      - REDIS_DB=1
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ANALYTICS_ENABLED=true
      - CACHE_TTL=5m
      - DEFAULT_ROLLOUT_RATE=0.0
      - MAX_ROLLOUT_RATE=1.0
      - ROLLOUT_INCREMENT=0.1
      - KILL_SWITCH_TIMEOUT=1m
      - AUTO_KILL_THRESHOLD=0.05
      - MAX_BATCH_SIZE=100
      - MAX_COHORT_SIZE=10000
    depends_on:
      - redis
    networks:
      - atlasmesh-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Open Policy Agent (OPA) - Policy Engine
  opa:
    image: openpolicyagent/opa:0.58.0-envoy
    container_name: atlasmesh-opa
    ports:
      - "8181:8181"
    command:
      - "run"
      - "--server"
      - "--addr=0.0.0.0:8181"
      - "--diagnostic-addr=0.0.0.0:8282"
      - "--set=plugins.envoy_ext_authz_grpc.addr=:9191"
      - "--set=plugins.envoy_ext_authz_grpc.enable_reflection=true"
      - "--set=decision_logs.console=true"
      - "--config-file=/config/opa-config.yaml"
      - "/policies"
    volumes:
      - ./security/policies:/policies:ro
      - ./security/opa/config.yaml:/config/opa-config.yaml:ro
    networks:
      - atlasmesh-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8181/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: atlasmesh-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - atlasmesh-network

  grafana:
    image: grafana/grafana:10.0.0
    container_name: atlasmesh-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: atlasmesh_grafana_password
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - atlasmesh-network
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: atlasmesh-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: 'true'
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - atlasmesh-network

  # Core Services
  policy-engine:
    build:
      context: ./services/policy-engine
      dockerfile: Dockerfile
    container_name: atlasmesh-policy-engine
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgres://atlasmesh:atlasmesh_dev_password@postgres:5432/atlasmesh_policy?sslmode=disable
      REDIS_URL: redis://:atlasmesh_redis_password@redis:6379/0
      KAFKA_BROKERS: kafka:9092
      HTTP_PORT: 8080
      GRPC_PORT: 9090
      METRICS_ENABLED: 'true'
      AUDIT_ENABLED: 'true'
      POLICY_CACHE_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "8080:8080"
      - "9090:9090"
    networks:
      - atlasmesh-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  trip-service:
    build:
      context: ./services/trip-service
      dockerfile: Dockerfile
    container_name: atlasmesh-trip-service
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgres://atlasmesh:atlasmesh_dev_password@postgres:5432/atlasmesh_trips?sslmode=disable
      EVENT_STORE_URL: postgres://atlasmesh:atlasmesh_dev_password@postgres:5432/atlasmesh_trips?sslmode=disable
      KAFKA_BROKERS: kafka:9092
      POLICY_ENGINE_ADDRESS: policy-engine:9090
      HTTP_PORT: 8081
      GRPC_PORT: 9091
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "8081:8081"
      - "9091:9091"
    networks:
      - atlasmesh-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      policy-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  dispatch-service:
    build:
      context: ./services/dispatch-service
      dockerfile: Dockerfile
    container_name: atlasmesh-dispatch-service
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgres://atlasmesh:atlasmesh_dev_password@postgres:5432/atlasmesh_dispatch?sslmode=disable
      REDIS_URL: redis://:atlasmesh_redis_password@redis:6379/1
      KAFKA_BROKERS: kafka:9092
      POLICY_ENGINE_ADDRESS: policy-engine:9090
      FLEET_MANAGER_ADDRESS: fleet-manager:9094
      HTTP_PORT: 8082
      GRPC_PORT: 9092
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "8082:8082"
      - "9092:9092"
    networks:
      - atlasmesh-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      policy-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  routing-service:
    build:
      context: ./services/routing-service
      dockerfile: Dockerfile
    container_name: atlasmesh-routing-service
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgres://atlasmesh:atlasmesh_dev_password@postgres:5432/atlasmesh_routing?sslmode=disable
      KAFKA_BROKERS: kafka:9092
      POLICY_ENGINE_ADDRESS: policy-engine:9090
      HTTP_PORT: 8083
      GRPC_PORT: 9093
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      # External map service configuration
      MAP_SERVICE_URL: https://api.openstreetmap.org
      WEATHER_SERVICE_URL: https://api.openweathermap.org
    ports:
      - "8083:8083"
      - "9093:9093"
    networks:
      - atlasmesh-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      policy-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  fleet-manager:
    build:
      context: ./services/fleet-manager
      dockerfile: Dockerfile
    container_name: atlasmesh-fleet-manager
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgres://atlasmesh:atlasmesh_dev_password@postgres:5432/atlasmesh_fleet?sslmode=disable
      TIMESERIES_DB_URL: postgres://atlasmesh:atlasmesh_dev_password@postgres:5432/atlasmesh_fleet?sslmode=disable
      KAFKA_BROKERS: kafka:9092
      POLICY_ENGINE_ADDRESS: policy-engine:9090
      HTTP_PORT: 8084
      GRPC_PORT: 9094
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "8084:8084"
      - "9094:9094"
    networks:
      - atlasmesh-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      policy-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: atlasmesh-api-gateway
    environment:
      ENVIRONMENT: development
      HTTP_PORT: 8080
      HTTPS_PORT: 8443
      # Service endpoints
      POLICY_ENGINE_URL: http://policy-engine:8080
      TRIP_SERVICE_URL: http://trip-service:8081
      DISPATCH_SERVICE_URL: http://dispatch-service:8082
      ROUTING_SERVICE_URL: http://routing-service:8083
      FLEET_MANAGER_URL: http://fleet-manager:8084
      # Security configuration
      JWT_SECRET: atlasmesh_jwt_secret_key_for_development_only
      JWT_EXPIRY: 3600
      # Rate limiting
      RATE_LIMIT_ENABLED: 'true'
      RATE_LIMIT_REQUESTS_PER_MINUTE: 1000
      # Monitoring
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "8000:8080"
      - "8443:8443"
    networks:
      - atlasmesh-network
    depends_on:
      - policy-engine
      - trip-service
      - dispatch-service
      - routing-service
      - fleet-manager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Data Services
  telemetry-ingest:
    build:
      context: ./services/telemetry-ingest
      dockerfile: Dockerfile
    container_name: atlasmesh-telemetry-ingest
    environment:
      ENVIRONMENT: development
      KAFKA_BROKERS: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      HTTP_PORT: 8085
      GRPC_PORT: 9095
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      # Performance tuning
      BATCH_SIZE: 1000
      FLUSH_INTERVAL_MS: 1000
      MAX_THROUGHPUT: 100000
    ports:
      - "8085:8085"
      - "9095:9095"
    networks:
      - atlasmesh-network
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development Tools
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: atlasmesh-kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    ports:
      - "8080:8080"
    networks:
      - atlasmesh-network
    depends_on:
      - kafka
      - schema-registry

  # Control Center UI
  control-center:
    build:
      context: ./ui/control-center
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:8080
        VITE_WS_URL: ws://localhost:8080
        VITE_APP_VERSION: ${VERSION:-1.0.0}
        VITE_COMMIT_HASH: ${COMMIT_HASH:-dev}
        VITE_BUILD_DATE: ${BUILD_DATE}
    container_name: atlasmesh-control-center
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - api-gateway
    networks:
      - atlasmesh-network
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.control-center.rule=Host(`control-center.localhost`)"
      - "traefik.http.services.control-center.loadbalancer.server.port=3000"

  pgadmin:
    image: dpage/pgadmin4:7
    container_name: atlasmesh-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@atlasmesh.com
      PGADMIN_DEFAULT_PASSWORD: atlasmesh_pgadmin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./scripts/pgadmin-servers.json:/pgadmin4/servers.json:ro
    ports:
      - "5050:80"
    networks:
      - atlasmesh-network
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: atlasmesh-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:atlasmesh_redis_password
    ports:
      - "8082:8081"
    networks:
      - atlasmesh-network
    depends_on:
      - redis

  # Phase 2 Advanced Services
  predictive-maintenance:
    build:
      context: ./services/predictive-maintenance
      dockerfile: Dockerfile
    container_name: atlasmesh-predictive-maintenance
    environment:
      ENVIRONMENT: development
      HTTP_PORT: 8120
      GRPC_PORT: 9120
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: info
    ports:
      - "8120:8120"
      - "9120:9120"
    networks:
      - atlasmesh-network
    depends_on:
      - postgres
      - redis
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8120/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  feature-store-registry:
    build:
      context: ./services/feature-store-registry
      dockerfile: Dockerfile
    container_name: atlasmesh-feature-store-registry
    environment:
      ENVIRONMENT: development
      HTTP_PORT: 8121
      GRPC_PORT: 9121
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: info
    ports:
      - "8121:8121"
      - "9121:9121"
    networks:
      - atlasmesh-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8121/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  key-secret-management:
    build:
      context: ./services/key-secret-management
      dockerfile: Dockerfile
    container_name: atlasmesh-key-secret-management
    environment:
      ENVIRONMENT: development
      HTTP_PORT: 8122
      GRPC_PORT: 9122
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: info
    ports:
      - "8122:8122"
      - "9122:9122"
    networks:
      - atlasmesh-network
    depends_on:
      - vault
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8122/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  evidence-engine:
    build:
      context: ./services/evidence-engine
      dockerfile: Dockerfile
    container_name: atlasmesh-evidence-engine
    environment:
      ENVIRONMENT: development
      HTTP_PORT: 8123
      GRPC_PORT: 9123
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: info
    ports:
      - "8123:8123"
      - "9123:9123"
    networks:
      - atlasmesh-network
    depends_on:
      - postgres
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  auditability:
    build:
      context: ./services/auditability
      dockerfile: Dockerfile
    container_name: atlasmesh-auditability
    environment:
      ENVIRONMENT: development
      HTTP_PORT: 8124
      GRPC_PORT: 9124
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: info
    ports:
      - "8124:8124"
      - "9124:9124"
    networks:
      - atlasmesh-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8124/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  sector-overlays:
    build:
      context: ./services/sector-overlays
      dockerfile: Dockerfile
    container_name: atlasmesh-sector-overlays
    environment:
      ENVIRONMENT: development
      HTTP_PORT: 8125
      GRPC_PORT: 9125
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: info
    ports:
      - "8125:8125"
      - "9125:9125"
    networks:
      - atlasmesh-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8125/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  tenant-entitlements:
    build:
      context: ./services/tenant-entitlements
      dockerfile: Dockerfile
    container_name: atlasmesh-tenant-entitlements
    environment:
      ENVIRONMENT: development
      HTTP_PORT: 8126
      GRPC_PORT: 9126
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: info
    ports:
      - "8126:8126"
      - "9126:9126"
    networks:
      - atlasmesh-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8126/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  digital-twin-simulation:
    build:
      context: ./services/digital-twin-simulation
      dockerfile: Dockerfile
    container_name: atlasmesh-digital-twin-simulation
    environment:
      ENVIRONMENT: development
      HTTP_PORT: 8127
      GRPC_PORT: 9127
      METRICS_ENABLED: 'true'
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      LOG_LEVEL: info
    ports:
      - "8127:8127"
      - "9127:9127"
    networks:
      - atlasmesh-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8127/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  schema_registry_data:
    driver: local
  clickhouse_data:
    driver: local
  clickhouse_logs:
    driver: local
  minio_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  telemetry_data:
    driver: local
  vault_data:
    driver: local
  vault_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  atlasmesh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
