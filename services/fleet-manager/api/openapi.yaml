openapi: 3.0.3
info:
  title: AtlasMesh Fleet Manager API
  version: 0.1.0
  description: |
    Fleet and vehicle management service for the AtlasMesh Fleet OS.
    
    Manages vehicle lifecycle, health monitoring, capability manifests,
    telemetry collection, and maintenance scheduling.
    
  contact:
    name: AtlasMesh Fleet Team
    email: fleet@atlasmesh.ai

servers:
  - url: http://fleet-manager:8080/v1
    description: Internal service mesh

security:
  - bearerAuth: []

paths:
  # Vehicle Management
  /vehicles:
    get:
      summary: List vehicles with filtering and pagination
      operationId: listVehicles
      tags: [Vehicles]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/StatusFilter'
        - $ref: '#/components/parameters/TypeFilter'
        - $ref: '#/components/parameters/LocationFilter'
        - $ref: '#/components/parameters/SectorFilter'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
      responses:
        '200':
          description: List of vehicles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehiclesResponse'

    post:
      summary: Register new vehicle
      operationId: registerVehicle
      tags: [Vehicles]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterVehicleRequest'
      responses:
        '201':
          description: Vehicle registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /vehicles/{vehicleId}:
    get:
      summary: Get vehicle details by ID
      operationId: getVehicleById
      tags: [Vehicles]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      responses:
        '200':
          description: Vehicle details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '404':
          description: Vehicle not found

    patch:
      summary: Update vehicle information
      operationId: updateVehicle
      tags: [Vehicles]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVehicleRequest'
      responses:
        '200':
          description: Vehicle updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'

    delete:
      summary: Decommission vehicle
      operationId: decommissionVehicle
      tags: [Vehicles]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecommissionRequest'
      responses:
        '200':
          description: Vehicle decommissioned successfully

  /vehicles/{vehicleId}/capability-manifest:
    get:
      summary: Get vehicle capability manifest
      operationId: getCapabilityManifest
      tags: [Capabilities]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      responses:
        '200':
          description: Capability manifest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilityManifest'

    put:
      summary: Update capability manifest
      operationId: updateCapabilityManifest
      tags: [Capabilities]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CapabilityManifest'
      responses:
        '200':
          description: Capability manifest updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilityManifest'

  /vehicles/{vehicleId}/health:
    get:
      summary: Get vehicle health status
      operationId: getVehicleHealth
      tags: [Health]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      responses:
        '200':
          description: Vehicle health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleHealth'

  /vehicles/{vehicleId}/telemetry:
    get:
      summary: Get vehicle telemetry data
      operationId: getVehicleTelemetry
      tags: [Telemetry]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
        - $ref: '#/components/parameters/TimeRange'
        - $ref: '#/components/parameters/MetricFilter'
      responses:
        '200':
          description: Telemetry data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryResponse'

    post:
      summary: Report vehicle telemetry
      operationId: reportTelemetry
      tags: [Telemetry]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryReport'
      responses:
        '202':
          description: Telemetry accepted for processing

  /vehicles/{vehicleId}/events:
    get:
      summary: Get vehicle events
      operationId: getVehicleEvents
      tags: [Events]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
        - $ref: '#/components/parameters/EventTypeFilter'
        - $ref: '#/components/parameters/TimeRange'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
      responses:
        '200':
          description: Vehicle events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'

    post:
      summary: Report vehicle event
      operationId: reportEvent
      tags: [Events]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventReport'
      responses:
        '202':
          description: Event accepted for processing

  # Maintenance Management
  /vehicles/{vehicleId}/maintenance:
    get:
      summary: Get maintenance history
      operationId: getMaintenanceHistory
      tags: [Maintenance]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
        - $ref: '#/components/parameters/MaintenanceStatusFilter'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
      responses:
        '200':
          description: Maintenance history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceResponse'

    post:
      summary: Schedule maintenance
      operationId: scheduleMaintenance
      tags: [Maintenance]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleMaintenanceRequest'
      responses:
        '201':
          description: Maintenance scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceRecord'

  /vehicles/{vehicleId}/permits:
    get:
      summary: Get vehicle permits
      operationId: getVehiclePermits
      tags: [Permits]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      responses:
        '200':
          description: Vehicle permits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermitsResponse'

    post:
      summary: Add permit to vehicle
      operationId: addPermit
      tags: [Permits]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPermitRequest'
      responses:
        '201':
          description: Permit added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permit'

  # Fleet-wide Operations
  /fleet/summary:
    get:
      summary: Get fleet summary statistics
      operationId: getFleetSummary
      tags: [Fleet]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SectorFilter'
      responses:
        '200':
          description: Fleet summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetSummary'

  /fleet/health:
    get:
      summary: Get fleet health overview
      operationId: getFleetHealth
      tags: [Fleet]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Fleet health overview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetHealth'

  /fleet/utilization:
    get:
      summary: Get fleet utilization metrics
      operationId: getFleetUtilization
      tags: [Analytics]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/TimeRange'
        - name: granularity
          in: query
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
      responses:
        '200':
          description: Fleet utilization metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UtilizationResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TenantId:
      name: X-Tenant-ID
      in: header
      required: true
      schema:
        type: string
        format: uuid

    VehicleId:
      name: vehicleId
      in: path
      required: true
      schema:
        type: string

    StatusFilter:
      name: status
      in: query
      schema:
        type: array
        items:
          $ref: '#/components/schemas/VehicleStatus'

    TypeFilter:
      name: type
      in: query
      schema:
        type: array
        items:
          type: string

    LocationFilter:
      name: location
      in: query
      schema:
        type: string
      description: Filter by location (city, region, or coordinates)

    SectorFilter:
      name: sector
      in: query
      schema:
        type: array
        items:
          type: string
          enum: [defense, mining, logistics, ride_hail]

    TimeRange:
      name: time_range
      in: query
      schema:
        type: string
        enum: [1h, 6h, 24h, 7d, 30d, 90d]
        default: 24h

    MetricFilter:
      name: metrics
      in: query
      schema:
        type: array
        items:
          type: string
          enum: [location, speed, battery, fuel, temperature, diagnostics]

    EventTypeFilter:
      name: event_type
      in: query
      schema:
        type: array
        items:
          $ref: '#/components/schemas/EventType'

    MaintenanceStatusFilter:
      name: status
      in: query
      schema:
        type: array
        items:
          type: string
          enum: [scheduled, in_progress, completed, cancelled]

    PaginationLimit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    PaginationOffset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0

  schemas:
    # Enums
    VehicleStatus:
      type: string
      enum: [provisioning, healthy, degraded, standby, maintenance, retired, unknown]

    EventType:
      type: string
      enum: [heartbeat, state_change, fault, maintenance, safety, operational, diagnostic]

    # Core Domain Models
    Vehicle:
      type: object
      required: [id, tenant_id, type, status, capability_manifest, created_at]
      properties:
        id:
          type: string
          description: Unique vehicle identifier
        tenant_id:
          type: string
          format: uuid
        type:
          type: string
          description: Vehicle type (e.g., ugv_themis, haul_truck_cat)
        model:
          type: string
          description: Vehicle model name
        manufacturer:
          type: string
        vin:
          type: string
          description: Vehicle Identification Number
        license_plate:
          type: string
        
        # Status and State
        status:
          $ref: '#/components/schemas/VehicleStatus'
        operational_state:
          type: string
          enum: [idle, assigned, in_transit, charging, maintenance, emergency]
        
        # Physical Properties
        capability_manifest:
          $ref: '#/components/schemas/CapabilityManifest'
        current_location:
          $ref: '#/components/schemas/Location'
        home_base:
          $ref: '#/components/schemas/Location'
        
        # Connectivity
        communication_status:
          type: string
          enum: [connected, degraded, offline]
        last_heartbeat:
          type: string
          format: date-time
        
        # Energy/Fuel
        battery_level:
          type: integer
          minimum: 0
          maximum: 100
          nullable: true
        fuel_level:
          type: integer
          minimum: 0
          maximum: 100
          nullable: true
        range_remaining_km:
          type: number
          format: double
          nullable: true
        
        # Operational Data
        odometer_km:
          type: number
          format: double
        autonomous_km:
          type: number
          format: double
        total_trips:
          type: integer
        active_trip_id:
          type: string
          format: uuid
          nullable: true
        
        # Maintenance
        next_maintenance_km:
          type: number
          format: double
        next_maintenance_date:
          type: string
          format: date
        maintenance_status:
          type: string
          enum: [current, due_soon, overdue, in_maintenance]
        
        # Permits and Compliance
        permits:
          type: array
          items:
            $ref: '#/components/schemas/Permit'
        
        # Configuration
        software_version:
          type: string
        firmware_version:
          type: string
        map_version:
          type: string
        
        # Timestamps
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_active:
          type: string
          format: date-time

    RegisterVehicleRequest:
      type: object
      required: [id, type, capability_manifest]
      properties:
        id:
          type: string
        type:
          type: string
        model:
          type: string
        manufacturer:
          type: string
        vin:
          type: string
        license_plate:
          type: string
        capability_manifest:
          $ref: '#/components/schemas/CapabilityManifest'
        home_base:
          $ref: '#/components/schemas/Location'
        initial_permits:
          type: array
          items:
            $ref: '#/components/schemas/PermitRequest'

    UpdateVehicleRequest:
      type: object
      properties:
        license_plate:
          type: string
        home_base:
          $ref: '#/components/schemas/Location'
        status:
          $ref: '#/components/schemas/VehicleStatus'

    DecommissionRequest:
      type: object
      required: [reason]
      properties:
        reason:
          type: string
          enum: [end_of_life, sold, damaged_beyond_repair, compliance, upgrade]
        details:
          type: string
          maxLength: 500
        transfer_data:
          type: boolean
          default: true

    CapabilityManifest:
      type: object
      required: [vehicle_class, max_speed, drive_by_wire, sensors, compute, power]
      properties:
        vehicle_class:
          type: string
          enum: [ugv, sedan, suv, truck, bus, construction, mining, military]
        
        # Physical Capabilities
        dimensions:
          $ref: '#/components/schemas/VehicleDimensions'
        weight:
          $ref: '#/components/schemas/WeightCapacity'
        max_speed:
          type: integer
          description: Maximum speed in km/h
        max_payload:
          type: integer
          description: Maximum payload in kg
        max_grade:
          type: integer
          description: Maximum grade in degrees
        
        # Drive-by-Wire Capabilities
        drive_by_wire:
          $ref: '#/components/schemas/DriveByWireCapabilities'
        
        # Sensor Suite
        sensors:
          type: array
          items:
            $ref: '#/components/schemas/SensorSpec'
        
        # Compute Platform
        compute:
          $ref: '#/components/schemas/ComputeSpec'
        
        # Power System
        power:
          $ref: '#/components/schemas/PowerSpec'
        
        # Environmental Limits
        operating_conditions:
          $ref: '#/components/schemas/OperatingConditions'
        
        # Supported Operations
        supported_odds:
          type: array
          items:
            type: string
            enum: [urban, highway, mining_site, port_yard, military_base, construction_site]
        
        # Regulatory and Safety
        certifications:
          type: array
          items:
            type: string
        safety_integrity_level:
          type: string
          enum: [sil1, sil2, sil3, sil4]

    VehicleDimensions:
      type: object
      required: [length, width, height]
      properties:
        length:
          type: number
          format: double
          description: Length in meters
        width:
          type: number
          format: double
          description: Width in meters
        height:
          type: number
          format: double
          description: Height in meters
        wheelbase:
          type: number
          format: double
          description: Wheelbase in meters

    WeightCapacity:
      type: object
      required: [empty, max_gross]
      properties:
        empty:
          type: integer
          description: Empty weight in kg
        max_gross:
          type: integer
          description: Maximum gross weight in kg
        max_payload:
          type: integer
          description: Maximum payload in kg

    DriveByWireCapabilities:
      type: object
      required: [steering, throttle, brake]
      properties:
        steering:
          $ref: '#/components/schemas/SteeringSpec'
        throttle:
          $ref: '#/components/schemas/ThrottleSpec'
        brake:
          $ref: '#/components/schemas/BrakeSpec'
        gear:
          $ref: '#/components/schemas/GearSpec'
        parking_brake:
          type: boolean
        turn_signals:
          type: boolean

    SteeringSpec:
      type: object
      required: [available, min_angle, max_angle]
      properties:
        available:
          type: boolean
        min_angle:
          type: number
          format: double
          description: Minimum steering angle in degrees
        max_angle:
          type: number
          format: double
          description: Maximum steering angle in degrees
        resolution:
          type: number
          format: double
          description: Angle resolution in degrees

    ThrottleSpec:
      type: object
      required: [available, min_position, max_position]
      properties:
        available:
          type: boolean
        min_position:
          type: number
          format: double
          description: Minimum throttle position (0-100%)
        max_position:
          type: number
          format: double
          description: Maximum throttle position (0-100%)
        resolution:
          type: number
          format: double
          description: Position resolution (%)

    BrakeSpec:
      type: object
      required: [available, min_pressure, max_pressure]
      properties:
        available:
          type: boolean
        min_pressure:
          type: number
          format: double
          description: Minimum brake pressure (0-100%)
        max_pressure:
          type: number
          format: double
          description: Maximum brake pressure (0-100%)
        abs_available:
          type: boolean
          description: ABS availability
        emergency_brake:
          type: boolean
          description: Emergency brake availability

    GearSpec:
      type: object
      required: [available, gears]
      properties:
        available:
          type: boolean
        gears:
          type: array
          items:
            type: string
            enum: [park, neutral, drive, reverse, manual1, manual2, manual3, manual4, manual5]
        automatic:
          type: boolean

    SensorSpec:
      type: object
      required: [type, model]
      properties:
        type:
          type: string
          enum: [lidar, camera, radar, ultrasonic, imu, gps, odometry, thermal]
        model:
          type: string
        manufacturer:
          type: string
        count:
          type: integer
          default: 1
        position:
          $ref: '#/components/schemas/SensorPosition'
        field_of_view:
          $ref: '#/components/schemas/FieldOfView'
        range:
          $ref: '#/components/schemas/SensorRange'
        resolution:
          type: string
        frame_rate:
          type: integer
          description: Frame rate in Hz

    SensorPosition:
      type: object
      properties:
        x:
          type: number
          format: double
          description: X position in meters from vehicle center
        y:
          type: number
          format: double
          description: Y position in meters from vehicle center
        z:
          type: number
          format: double
          description: Z position in meters from ground
        roll:
          type: number
          format: double
          description: Roll angle in degrees
        pitch:
          type: number
          format: double
          description: Pitch angle in degrees
        yaw:
          type: number
          format: double
          description: Yaw angle in degrees

    FieldOfView:
      type: object
      properties:
        horizontal:
          type: number
          format: double
          description: Horizontal field of view in degrees
        vertical:
          type: number
          format: double
          description: Vertical field of view in degrees

    SensorRange:
      type: object
      properties:
        min:
          type: number
          format: double
          description: Minimum range in meters
        max:
          type: number
          format: double
          description: Maximum range in meters

    ComputeSpec:
      type: object
      required: [platform, cpu_cores, memory_gb, storage_gb]
      properties:
        platform:
          type: string
          description: Compute platform (e.g., nvidia_jetson_agx_orin)
        cpu_cores:
          type: integer
        cpu_arch:
          type: string
          enum: [x86_64, arm64, aarch64]
        memory_gb:
          type: integer
          description: RAM in GB
        gpu_memory_gb:
          type: integer
          description: GPU memory in GB
        storage_gb:
          type: integer
          description: Storage in GB
        storage_type:
          type: string
          enum: [ssd_nvme, ssd_sata, hdd, emmc]
        ai_accelerator:
          type: string
          description: AI acceleration hardware

    PowerSpec:
      type: object
      required: [type, capacity, voltage]
      properties:
        type:
          type: string
          enum: [battery, fuel, hybrid, diesel, gas]
        capacity:
          type: string
          description: Energy capacity (e.g., "50kWh", "100L")
        voltage:
          type: string
          description: System voltage (e.g., "48V", "400V")
        max_power:
          type: string
          description: Maximum power (e.g., "2kW")
        charging_types:
          type: array
          items:
            type: string
            enum: [ccs2, type2, chademo, tesla, j1772, wireless, fuel_station]
        backup_power:
          type: boolean
          description: Backup power system available

    OperatingConditions:
      type: object
      properties:
        temperature:
          $ref: '#/components/schemas/TemperatureRange'
        humidity:
          $ref: '#/components/schemas/HumidityRange'
        altitude:
          $ref: '#/components/schemas/AltitudeRange'
        ingress_protection:
          type: string
          description: IP rating (e.g., IP67)
        vibration_class:
          type: string
          description: Vibration resistance class
        dust_resistance:
          type: boolean
        water_resistance:
          type: boolean

    TemperatureRange:
      type: object
      required: [min, max]
      properties:
        min:
          type: integer
          description: Minimum operating temperature in Celsius
        max:
          type: integer
          description: Maximum operating temperature in Celsius

    HumidityRange:
      type: object
      required: [min, max]
      properties:
        min:
          type: integer
          description: Minimum relative humidity (%)
        max:
          type: integer
          description: Maximum relative humidity (%)

    AltitudeRange:
      type: object
      required: [min, max]
      properties:
        min:
          type: integer
          description: Minimum altitude in meters
        max:
          type: integer
          description: Maximum altitude in meters

    # Health and Telemetry
    VehicleHealth:
      type: object
      required: [vehicle_id, overall_status, last_updated]
      properties:
        vehicle_id:
          type: string
        overall_status:
          type: string
          enum: [healthy, degraded, critical, unknown]
        last_updated:
          type: string
          format: date-time
        subsystems:
          type: array
          items:
            $ref: '#/components/schemas/SubsystemHealth'
        active_faults:
          type: array
          items:
            $ref: '#/components/schemas/Fault'
        health_score:
          type: number
          format: double
          minimum: 0
          maximum: 100

    SubsystemHealth:
      type: object
      required: [name, status]
      properties:
        name:
          type: string
          enum: [engine, transmission, brakes, steering, battery, charging, sensors, compute, communication]
        status:
          type: string
          enum: [healthy, degraded, fault, unknown]
        details:
          type: string
        last_check:
          type: string
          format: date-time
        metrics:
          type: object
          additionalProperties:
            type: number

    Fault:
      type: object
      required: [code, severity, description, timestamp]
      properties:
        code:
          type: string
        severity:
          type: string
          enum: [info, warning, error, critical]
        description:
          type: string
        subsystem:
          type: string
        timestamp:
          type: string
          format: date-time
        acknowledged:
          type: boolean
        resolved:
          type: boolean

    TelemetryReport:
      type: object
      required: [timestamp, location]
      properties:
        timestamp:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/Location'
        motion:
          $ref: '#/components/schemas/MotionTelemetry'
        power:
          $ref: '#/components/schemas/PowerTelemetry'
        environmental:
          $ref: '#/components/schemas/EnvironmentalTelemetry'
        subsystems:
          type: object
          additionalProperties:
            type: object

    MotionTelemetry:
      type: object
      properties:
        speed:
          type: number
          format: double
          description: Speed in km/h
        heading:
          type: number
          format: double
          description: Heading in degrees
        acceleration:
          $ref: '#/components/schemas/Acceleration'
        steering_angle:
          type: number
          format: double
          description: Current steering angle in degrees
        gear:
          type: string
        odometer:
          type: number
          format: double
          description: Odometer reading in km

    Acceleration:
      type: object
      properties:
        x:
          type: number
          format: double
          description: Longitudinal acceleration in m/s²
        y:
          type: number
          format: double
          description: Lateral acceleration in m/s²
        z:
          type: number
          format: double
          description: Vertical acceleration in m/s²

    PowerTelemetry:
      type: object
      properties:
        battery_level:
          type: integer
          minimum: 0
          maximum: 100
        fuel_level:
          type: integer
          minimum: 0
          maximum: 100
        voltage:
          type: number
          format: double
        current:
          type: number
          format: double
        power_consumption:
          type: number
          format: double
        energy_efficiency:
          type: number
          format: double
        charging_status:
          type: string
          enum: [charging, discharging, full, unknown]

    EnvironmentalTelemetry:
      type: object
      properties:
        internal_temperature:
          type: number
          format: double
        external_temperature:
          type: number
          format: double
        humidity:
          type: integer
          minimum: 0
          maximum: 100
        air_pressure:
          type: number
          format: double

    # Events
    EventReport:
      type: object
      required: [type, timestamp, data]
      properties:
        type:
          $ref: '#/components/schemas/EventType'
        timestamp:
          type: string
          format: date-time
        severity:
          type: string
          enum: [info, warning, error, critical]
        description:
          type: string
        data:
          type: object
          additionalProperties: true
        tags:
          type: array
          items:
            type: string

    Event:
      type: object
      required: [id, vehicle_id, type, timestamp]
      properties:
        id:
          type: string
          format: uuid
        vehicle_id:
          type: string
        type:
          $ref: '#/components/schemas/EventType'
        timestamp:
          type: string
          format: date-time
        severity:
          type: string
          enum: [info, warning, error, critical]
        description:
          type: string
        data:
          type: object
          additionalProperties: true
        tags:
          type: array
          items:
            type: string
        acknowledged:
          type: boolean
        acknowledged_by:
          type: string
          nullable: true
        acknowledged_at:
          type: string
          format: date-time
          nullable: true

    # Maintenance
    MaintenanceRecord:
      type: object
      required: [id, vehicle_id, type, status, created_at]
      properties:
        id:
          type: string
          format: uuid
        vehicle_id:
          type: string
        type:
          type: string
          enum: [preventive, corrective, emergency, inspection, software_update]
        status:
          type: string
          enum: [scheduled, in_progress, completed, cancelled]
        priority:
          type: string
          enum: [low, medium, high, critical]
        description:
          type: string
        estimated_duration_hours:
          type: integer
        actual_duration_hours:
          type: integer
          nullable: true
        cost:
          type: number
          format: double
        parts_used:
          type: array
          items:
            $ref: '#/components/schemas/MaintenancePart'
        technician:
          type: string
        scheduled_date:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        notes:
          type: string

    ScheduleMaintenanceRequest:
      type: object
      required: [type, scheduled_date]
      properties:
        type:
          type: string
          enum: [preventive, corrective, emergency, inspection, software_update]
        priority:
          type: string
          enum: [low, medium, high, critical]
          default: medium
        description:
          type: string
        scheduled_date:
          type: string
          format: date-time
        estimated_duration_hours:
          type: integer
        technician:
          type: string

    MaintenancePart:
      type: object
      required: [part_number, description, quantity]
      properties:
        part_number:
          type: string
        description:
          type: string
        quantity:
          type: integer
        unit_cost:
          type: number
          format: double

    # Permits
    Permit:
      type: object
      required: [id, type, jurisdiction, valid_from, valid_to]
      properties:
        id:
          type: string
        type:
          type: string
          enum: [operating, safety, environmental, customs, special_transport]
        jurisdiction:
          type: string
        valid_from:
          type: string
          format: date
        valid_to:
          type: string
          format: date
        restrictions:
          type: array
          items:
            type: string
        issuing_authority:
          type: string
        permit_number:
          type: string
        status:
          type: string
          enum: [active, expired, suspended, pending_renewal]

    PermitRequest:
      type: object
      required: [type, jurisdiction, valid_from, valid_to]
      properties:
        type:
          type: string
          enum: [operating, safety, environmental, customs, special_transport]
        jurisdiction:
          type: string
        valid_from:
          type: string
          format: date
        valid_to:
          type: string
          format: date
        restrictions:
          type: array
          items:
            type: string
        issuing_authority:
          type: string
        permit_number:
          type: string

    AddPermitRequest:
      allOf:
        - $ref: '#/components/schemas/PermitRequest'

    # Fleet Analytics
    FleetSummary:
      type: object
      required: [total_vehicles, by_status, by_type]
      properties:
        total_vehicles:
          type: integer
        by_status:
          type: object
          properties:
            healthy:
              type: integer
            degraded:
              type: integer
            standby:
              type: integer
            maintenance:
              type: integer
            retired:
              type: integer
        by_type:
          type: object
          additionalProperties:
            type: integer
        by_sector:
          type: object
          additionalProperties:
            type: integer
        fleet_metrics:
          $ref: '#/components/schemas/FleetMetrics'

    FleetHealth:
      type: object
      required: [overall_health_score, critical_vehicles, warnings]
      properties:
        overall_health_score:
          type: number
          format: double
          minimum: 0
          maximum: 100
        critical_vehicles:
          type: integer
        warnings:
          type: integer
        health_distribution:
          type: object
          properties:
            excellent:
              type: integer
            good:
              type: integer
            fair:
              type: integer
            poor:
              type: integer
            critical:
              type: integer

    FleetMetrics:
      type: object
      properties:
        total_km_driven:
          type: number
          format: double
        autonomous_km_percentage:
          type: number
          format: double
        average_utilization:
          type: number
          format: double
        total_trips_completed:
          type: integer
        average_trips_per_vehicle:
          type: number
          format: double
        fuel_efficiency:
          type: number
          format: double
        maintenance_cost_per_km:
          type: number
          format: double

    UtilizationResponse:
      type: object
      required: [time_range, data]
      properties:
        time_range:
          type: string
        granularity:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/UtilizationDataPoint'

    UtilizationDataPoint:
      type: object
      required: [timestamp, utilization_percentage]
      properties:
        timestamp:
          type: string
          format: date-time
        utilization_percentage:
          type: number
          format: double
          minimum: 0
          maximum: 100
        active_vehicles:
          type: integer
        total_vehicles:
          type: integer
        trips_active:
          type: integer

    # Common Models
    Location:
      type: object
      required: [latitude, longitude]
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
        altitude:
          type: number
          format: double
        accuracy:
          type: number
          format: double
        heading:
          type: number
          format: double
          minimum: 0
          maximum: 360
        address:
          type: string
        city:
          type: string
        region:
          type: string
        country:
          type: string

    # Response Collections
    VehiclesResponse:
      type: object
      required: [vehicles, pagination]
      properties:
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/Vehicle'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'
        summary:
          $ref: '#/components/schemas/FleetSummary'

    TelemetryResponse:
      type: object
      required: [vehicle_id, time_range, data]
      properties:
        vehicle_id:
          type: string
        time_range:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/TelemetryReport'

    EventsResponse:
      type: object
      required: [events, pagination]
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    MaintenanceResponse:
      type: object
      required: [records, pagination]
      properties:
        records:
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceRecord'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    PermitsResponse:
      type: object
      required: [permits]
      properties:
        permits:
          type: array
          items:
            $ref: '#/components/schemas/Permit'
        summary:
          type: object
          properties:
            total:
              type: integer
            active:
              type: integer
            expiring_soon:
              type: integer
            expired:
              type: integer

    PaginationMeta:
      type: object
      required: [offset, limit, total]
      properties:
        offset:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        has_more:
          type: boolean

    # Error Models
    ValidationError:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
          enum: [validation_failed]
        message:
          type: string
        validation_errors:
          type: array
          items:
            $ref: '#/components/schemas/FieldError'
        timestamp:
          type: string
          format: date-time

    FieldError:
      type: object
      required: [field, code, message]
      properties:
        field:
          type: string
        code:
          type: string
        message:
          type: string
        value:
          type: string
