syntax = "proto3";

package atlasmesh.feature_flags.v1;

option go_package = "github.com/atlasmesh/fleet-os/services/feature-flags/proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// FeatureFlagsService provides feature flag evaluation and management
service FeatureFlagsService {
  // Feature flag evaluation
  rpc EvaluateFlag(EvaluateFlagRequest) returns (EvaluateFlagResponse);
  rpc BatchEvaluateFlags(BatchEvaluateFlagsRequest) returns (BatchEvaluateFlagsResponse);
  
  // Feature flag management
  rpc CreateFlag(CreateFlagRequest) returns (CreateFlagResponse);
  rpc GetFlag(GetFlagRequest) returns (GetFlagResponse);
  rpc UpdateFlag(UpdateFlagRequest) returns (UpdateFlagResponse);
  rpc DeleteFlag(DeleteFlagRequest) returns (DeleteFlagResponse);
  rpc ListFlags(ListFlagsRequest) returns (ListFlagsResponse);
  
  // Cohort management
  rpc CreateCohort(CreateCohortRequest) returns (CreateCohortResponse);
  rpc GetCohort(GetCohortRequest) returns (GetCohortResponse);
  rpc UpdateCohort(UpdateCohortRequest) returns (UpdateCohortResponse);
  rpc DeleteCohort(DeleteCohortRequest) returns (DeleteCohortResponse);
  rpc ListCohorts(ListCohortsRequest) returns (ListCohortsResponse);
  
  // Entity-cohort management
  rpc AssignEntityToCohort(AssignEntityToCohortRequest) returns (AssignEntityToCohortResponse);
  rpc RemoveEntityFromCohort(RemoveEntityFromCohortRequest) returns (RemoveEntityFromCohortResponse);
  rpc GetEntityCohorts(GetEntityCohortsRequest) returns (GetEntityCohortsResponse);
  
  // Kill switches
  rpc KillSwitch(KillSwitchRequest) returns (KillSwitchResponse);
  rpc ReviveFlag(ReviveFlagRequest) returns (ReviveFlagResponse);
  
  // Analytics
  rpc GetFlagAnalytics(GetFlagAnalyticsRequest) returns (GetFlagAnalyticsResponse);
  rpc GetCohortAnalytics(GetCohortAnalyticsRequest) returns (GetCohortAnalyticsResponse);
}

// Feature flag evaluation request
message EvaluateFlagRequest {
  string flag_key = 1;
  EvaluationContext context = 2;
  google.protobuf.Value default_value = 3;
}

message EvaluateFlagResponse {
  google.protobuf.Value value = 1;
  string variation_key = 2;
  string reason = 3;
  bool is_default = 4;
  google.protobuf.Timestamp evaluated_at = 5;
}

// Batch evaluation request
message BatchEvaluateFlagsRequest {
  repeated string flag_keys = 1;
  EvaluationContext context = 2;
  map<string, google.protobuf.Value> default_values = 3;
}

message BatchEvaluateFlagsResponse {
  map<string, EvaluateFlagResponse> evaluations = 1;
}

// Evaluation context contains information about the entity being evaluated
message EvaluationContext {
  string entity_id = 1;
  EntityType entity_type = 2;
  map<string, string> attributes = 3;
  repeated string cohort_ids = 4;
  google.protobuf.Timestamp timestamp = 5;
  
  // AtlasMesh-specific context
  string sector = 6;
  string vehicle_id = 7;
  string user_id = 8;
  string tenant_id = 9;
  string environment = 10;
  string region = 11;
}

enum EntityType {
  ENTITY_TYPE_UNSPECIFIED = 0;
  ENTITY_TYPE_USER = 1;
  ENTITY_TYPE_VEHICLE = 2;
  ENTITY_TYPE_TENANT = 3;
  ENTITY_TYPE_SERVICE = 4;
  ENTITY_TYPE_DEVICE = 5;
}

// Feature flag definition
message FeatureFlag {
  string key = 1;
  string name = 2;
  string description = 3;
  FlagType type = 4;
  bool enabled = 5;
  repeated Variation variations = 6;
  repeated Rule rules = 7;
  Rollout rollout = 8;
  KillSwitch kill_switch = 9;
  map<string, string> tags = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
  string created_by = 13;
  string updated_by = 14;
}

enum FlagType {
  FLAG_TYPE_UNSPECIFIED = 0;
  FLAG_TYPE_BOOLEAN = 1;
  FLAG_TYPE_STRING = 2;
  FLAG_TYPE_INTEGER = 3;
  FLAG_TYPE_FLOAT = 4;
  FLAG_TYPE_JSON = 5;
}

message Variation {
  string key = 1;
  string name = 2;
  google.protobuf.Value value = 3;
  string description = 4;
}

message Rule {
  string id = 1;
  repeated Condition conditions = 2;
  string variation_key = 3;
  int32 priority = 4;
  bool enabled = 5;
}

message Condition {
  string attribute = 1;
  Operator operator = 2;
  repeated string values = 3;
}

enum Operator {
  OPERATOR_UNSPECIFIED = 0;
  OPERATOR_EQUALS = 1;
  OPERATOR_NOT_EQUALS = 2;
  OPERATOR_IN = 3;
  OPERATOR_NOT_IN = 4;
  OPERATOR_CONTAINS = 5;
  OPERATOR_NOT_CONTAINS = 6;
  OPERATOR_STARTS_WITH = 7;
  OPERATOR_ENDS_WITH = 8;
  OPERATOR_GREATER_THAN = 9;
  OPERATOR_GREATER_THAN_OR_EQUAL = 10;
  OPERATOR_LESS_THAN = 11;
  OPERATOR_LESS_THAN_OR_EQUAL = 12;
  OPERATOR_REGEX_MATCH = 13;
  OPERATOR_COHORT_MEMBER = 14;
}

message Rollout {
  RolloutType type = 1;
  double percentage = 2;
  string variation_key = 3;
  repeated CohortRollout cohort_rollouts = 4;
  string bucket_by = 5; // attribute to bucket by (e.g., "user_id", "vehicle_id")
}

enum RolloutType {
  ROLLOUT_TYPE_UNSPECIFIED = 0;
  ROLLOUT_TYPE_PERCENTAGE = 1;
  ROLLOUT_TYPE_COHORT = 2;
  ROLLOUT_TYPE_HYBRID = 3;
}

message CohortRollout {
  string cohort_id = 1;
  string variation_key = 2;
  double percentage = 3;
}

message KillSwitch {
  bool enabled = 1;
  string reason = 2;
  google.protobuf.Timestamp activated_at = 3;
  string activated_by = 4;
  string default_variation_key = 5;
}

// Cohort definition
message Cohort {
  string id = 1;
  string name = 2;
  string description = 3;
  CohortType type = 4;
  repeated CohortRule rules = 5;
  int32 size = 6;
  int32 max_size = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
  string created_by = 10;
  string updated_by = 11;
  map<string, string> metadata = 12;
}

enum CohortType {
  COHORT_TYPE_UNSPECIFIED = 0;
  COHORT_TYPE_STATIC = 1;
  COHORT_TYPE_DYNAMIC = 2;
}

message CohortRule {
  string attribute = 1;
  Operator operator = 2;
  repeated string values = 3;
}

// Request/Response messages for CRUD operations

// Feature flag CRUD
message CreateFlagRequest {
  FeatureFlag flag = 1;
}

message CreateFlagResponse {
  FeatureFlag flag = 1;
}

message GetFlagRequest {
  string flag_key = 1;
}

message GetFlagResponse {
  FeatureFlag flag = 1;
}

message UpdateFlagRequest {
  FeatureFlag flag = 1;
  repeated string update_mask = 2;
}

message UpdateFlagResponse {
  FeatureFlag flag = 1;
}

message DeleteFlagRequest {
  string flag_key = 1;
}

message DeleteFlagResponse {
  bool success = 1;
}

message ListFlagsRequest {
  int32 page_size = 1;
  string page_token = 2;
  string filter = 3;
  string order_by = 4;
}

message ListFlagsResponse {
  repeated FeatureFlag flags = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// Cohort CRUD
message CreateCohortRequest {
  Cohort cohort = 1;
}

message CreateCohortResponse {
  Cohort cohort = 1;
}

message GetCohortRequest {
  string cohort_id = 1;
}

message GetCohortResponse {
  Cohort cohort = 1;
}

message UpdateCohortRequest {
  Cohort cohort = 1;
  repeated string update_mask = 2;
}

message UpdateCohortResponse {
  Cohort cohort = 1;
}

message DeleteCohortRequest {
  string cohort_id = 1;
}

message DeleteCohortResponse {
  bool success = 1;
}

message ListCohortsRequest {
  int32 page_size = 1;
  string page_token = 2;
  string filter = 3;
  string order_by = 4;
}

message ListCohortsResponse {
  repeated Cohort cohorts = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// Entity-cohort management
message AssignEntityToCohortRequest {
  string entity_id = 1;
  EntityType entity_type = 2;
  string cohort_id = 3;
  map<string, string> attributes = 4;
}

message AssignEntityToCohortResponse {
  bool success = 1;
}

message RemoveEntityFromCohortRequest {
  string entity_id = 1;
  EntityType entity_type = 2;
  string cohort_id = 3;
}

message RemoveEntityFromCohortResponse {
  bool success = 1;
}

message GetEntityCohortsRequest {
  string entity_id = 1;
  EntityType entity_type = 2;
}

message GetEntityCohortsResponse {
  repeated string cohort_ids = 1;
}

// Kill switch operations
message KillSwitchRequest {
  string flag_key = 1;
  string reason = 2;
  string default_variation_key = 3;
}

message KillSwitchResponse {
  bool success = 1;
  google.protobuf.Timestamp activated_at = 2;
}

message ReviveFlagRequest {
  string flag_key = 1;
}

message ReviveFlagResponse {
  bool success = 1;
  google.protobuf.Timestamp revived_at = 2;
}

// Analytics
message GetFlagAnalyticsRequest {
  string flag_key = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  string granularity = 4; // "hour", "day", "week"
}

message GetFlagAnalyticsResponse {
  FlagAnalytics analytics = 1;
}

message FlagAnalytics {
  string flag_key = 1;
  int64 total_evaluations = 2;
  map<string, int64> variation_counts = 3;
  repeated AnalyticsDataPoint data_points = 4;
  double error_rate = 5;
  double average_latency_ms = 6;
}

message GetCohortAnalyticsRequest {
  string cohort_id = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
}

message GetCohortAnalyticsResponse {
  CohortAnalytics analytics = 1;
}

message CohortAnalytics {
  string cohort_id = 1;
  int32 current_size = 2;
  int32 max_size = 3;
  repeated AnalyticsDataPoint size_history = 4;
  map<string, int64> flag_evaluations = 5;
}

message AnalyticsDataPoint {
  google.protobuf.Timestamp timestamp = 1;
  int64 value = 2;
  map<string, string> labels = 3;
}
