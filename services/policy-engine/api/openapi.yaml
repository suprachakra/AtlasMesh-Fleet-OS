openapi: 3.0.3
info:
  title: AtlasMesh Policy Engine API
  version: 2.0.0
  description: |
    Policy-as-Code engine for AtlasMesh Fleet OS.
    
    Provides policy evaluation, management, and audit capabilities
    using Open Policy Agent (OPA) with Rego language support.
    
    ## Key Features
    - Real-time policy evaluation with <200ms latency SLA
    - Policy versioning and rollback capabilities
    - Comprehensive audit logging for compliance
    - Multi-tenant policy isolation
    - Sector-specific policy overlays
    
    ## Rate Limits
    - Policy evaluation: 10,000 requests/minute
    - Policy management: 1,000 requests/minute
    - Bulk operations: 100 requests/minute
    
    ## Performance SLAs
    - P50 latency: <100ms
    - P95 latency: <200ms
    - P99 latency: <500ms
    - Availability: 99.9%

  contact:
    name: AtlasMesh Policy Team
    email: policy-team@atlasmesh.ai
    url: https://docs.atlasmesh.ai/policy
  license:
    name: Proprietary
    url: https://atlasmesh.ai/license

servers:
  - url: http://policy-engine:8091/v2
    description: Internal service endpoint
  - url: https://api.atlasmesh.ai/policy/v2
    description: Production API
  - url: https://api-staging.atlasmesh.ai/policy/v2
    description: Staging API

security:
  - bearerAuth: []
  - serviceAuth: []

paths:
  /health:
    get:
      summary: Health check
      operationId: getHealth
      tags: [System]
      security: []
      responses:
        '200':
          description: Service is healthy
          headers:
            X-Response-Time:
              schema:
                type: string
              description: Response time in milliseconds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /policies:
    get:
      summary: List policies with advanced filtering
      operationId: listPolicies
      tags: [Policy Management]
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageToken'
        - name: sector
          in: query
          schema:
            type: string
            enum: [defense, mining, logistics, ride-hail, universal]
        - name: environment
          in: query
          schema:
            type: string
            enum: [development, staging, production]
        - name: active_only
          in: query
          schema:
            type: boolean
            default: true
        - name: search
          in: query
          schema:
            type: string
            maxLength: 100
          description: Search in policy name and description
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [name, created_at, updated_at, version]
            default: updated_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of policies
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total number of policies
            X-Rate-Limit-Remaining:
              schema:
                type: integer
              description: Remaining requests in current window
          content:
            application/json:
              schema:
                type: object
                properties:
                  policies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Policy'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create a new policy
      operationId: createPolicy
      tags: [Policy Management]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyRequest'
      responses:
        '201':
          description: Policy created successfully
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URL of the created policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Policy with same name/version already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /policies/{policyId}:
    parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get policy by ID
      operationId: getPolicy
      tags: [Policy Management]
      responses:
        '200':
          description: Policy details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update policy
      operationId: updatePolicy
      tags: [Policy Management]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePolicyRequest'
      responses:
        '200':
          description: Policy updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Version conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: Delete policy (soft delete)
      operationId: deletePolicy
      tags: [Policy Management]
      responses:
        '204':
          description: Policy deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Policy is currently active and cannot be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /policies/{policyId}/evaluate:
    post:
      summary: Evaluate policy against input data
      operationId: evaluatePolicy
      tags: [Policy Evaluation]
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Trace-Id
          in: header
          schema:
            type: string
          description: Distributed tracing ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyEvaluationRequest'
      responses:
        '200':
          description: Policy evaluation result
          headers:
            X-Evaluation-Time-Ms:
              schema:
                type: number
              description: Policy evaluation time in milliseconds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyEvaluationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Policy evaluation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /evaluate/batch:
    post:
      summary: Evaluate multiple policies (batch evaluation)
      operationId: batchEvaluatePolicy
      tags: [Policy Evaluation]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchPolicyEvaluationRequest'
      responses:
        '200':
          description: Batch evaluation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPolicyEvaluationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '413':
          description: Batch size too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /policies/{policyId}/versions:
    get:
      summary: List policy versions
      operationId: listPolicyVersions
      tags: [Policy Management]
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of policy versions
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      $ref: '#/components/schemas/PolicyVersion'

  /audit/evaluations:
    get:
      summary: Get policy evaluation audit logs
      operationId: getEvaluationAuditLogs
      tags: [Audit]
      parameters:
        - name: policy_id
          in: query
          schema:
            type: string
            format: uuid
        - name: vehicle_id
          in: query
          schema:
            type: string
            format: uuid
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageToken'
      responses:
        '200':
          description: Audit log entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  audit_logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/PolicyAuditLog'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'

components:
  schemas:
    Policy:
      type: object
      required: [policy_id, name, version, rego_code, schema, sector]
      properties:
        policy_id:
          type: string
          format: uuid
          description: Unique policy identifier
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Human-readable policy name
        version:
          type: string
          pattern: '^v\d+\.\d+\.\d+$'
          description: Semantic version (e.g., v1.2.3)
        rego_code:
          type: string
          minLength: 1
          description: OPA Rego policy code
        schema:
          type: object
          description: JSON schema for policy input validation
        sector:
          type: string
          enum: [defense, mining, logistics, ride-hail, universal]
          description: Target sector for this policy
        environment:
          type: string
          enum: [development, staging, production]
          description: Environment where policy is active
        is_active:
          type: boolean
          description: Whether policy is currently active
        effective_from:
          type: string
          format: date-time
          description: When policy becomes effective
        effective_until:
          type: string
          format: date-time
          nullable: true
          description: When policy expires (null = no expiration)
        created_by:
          type: string
          description: User who created the policy
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        metadata:
          type: object
          additionalProperties: true
          description: Additional policy metadata

    CreatePolicyRequest:
      type: object
      required: [name, version, rego_code, schema, sector]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        version:
          type: string
          pattern: '^v\d+\.\d+\.\d+$'
        rego_code:
          type: string
          minLength: 1
        schema:
          type: object
        sector:
          type: string
          enum: [defense, mining, logistics, ride-hail, universal]
        environment:
          type: string
          enum: [development, staging, production]
          default: development
        effective_from:
          type: string
          format: date-time
        effective_until:
          type: string
          format: date-time
          nullable: true
        metadata:
          type: object
          additionalProperties: true

    UpdatePolicyRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        rego_code:
          type: string
          minLength: 1
        schema:
          type: object
        is_active:
          type: boolean
        effective_from:
          type: string
          format: date-time
        effective_until:
          type: string
          format: date-time
          nullable: true
        metadata:
          type: object
          additionalProperties: true

    PolicyEvaluationRequest:
      type: object
      required: [input]
      properties:
        input:
          type: object
          description: Input data for policy evaluation
        context:
          type: object
          properties:
            vehicle_id:
              type: string
              format: uuid
            trip_id:
              type: string
              format: uuid
            user_id:
              type: string
              format: uuid
            timestamp:
              type: string
              format: date-time
            correlation_id:
              type: string
              description: Request correlation ID for tracing
            sector:
              type: string
              enum: [defense, mining, logistics, ride-hail]

    PolicyEvaluationResponse:
      type: object
      required: [result, decision, evaluation_time_ms]
      properties:
        result:
          type: object
          description: Raw policy evaluation result
        decision:
          type: string
          enum: [allow, deny, unknown]
          description: Simplified decision outcome
        allowed:
          type: boolean
          description: Whether the action is allowed
        constraints:
          type: object
          description: Additional constraints or modifications
        reason:
          type: string
          description: Human-readable explanation
        policy_id:
          type: string
          format: uuid
        policy_version:
          type: string
        evaluation_time_ms:
          type: number
          description: Time taken to evaluate policy
        correlation_id:
          type: string
        evaluated_at:
          type: string
          format: date-time

    BatchPolicyEvaluationRequest:
      type: object
      required: [evaluations]
      properties:
        evaluations:
          type: array
          items:
            type: object
            required: [policy_id, input]
            properties:
              policy_id:
                type: string
                format: uuid
              input:
                type: object
              context:
                type: object
          minItems: 1
          maxItems: 100

    BatchPolicyEvaluationResponse:
      type: object
      properties:
        results:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/PolicyEvaluationResponse'
              - type: object
                properties:
                  request_index:
                    type: integer
                    description: Index of the request in the batch
        batch_evaluation_time_ms:
          type: number
          description: Total time for batch evaluation

    PolicyVersion:
      type: object
      properties:
        version:
          type: string
        created_at:
          type: string
          format: date-time
        created_by:
          type: string
        is_active:
          type: boolean
        change_summary:
          type: string

    PolicyAuditLog:
      type: object
      properties:
        audit_id:
          type: string
          format: uuid
        policy_id:
          type: string
          format: uuid
        action:
          type: string
          enum: [evaluate, create, update, delete, activate, deactivate]
        performed_by:
          type: string
        performed_at:
          type: string
          format: date-time
        input_data:
          type: object
        result:
          type: object
        correlation_id:
          type: string

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        uptime_seconds:
          type: integer
        dependencies:
          type: object
          properties:
            database:
              type: string
              enum: [healthy, unhealthy]
            opa_engine:
              type: string
              enum: [healthy, unhealthy]

    ErrorResponse:
      type: object
      required: [error, message, timestamp, correlation_id]
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error context
        timestamp:
          type: string
          format: date-time
        correlation_id:
          type: string
          description: Request correlation ID for tracing
        retry_after:
          type: integer
          description: Seconds to wait before retrying (for rate limits)
        documentation_url:
          type: string
          format: uri
          description: Link to relevant documentation

    PaginationResponse:
      type: object
      properties:
        page_size:
          type: integer
        page_token:
          type: string
        next_page_token:
          type: string
        has_more:
          type: boolean

  parameters:
    PageSize:
      name: page_size
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    PageToken:
      name: page_token
      in: query
      schema:
        type: string

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    RateLimited:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per time window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Unix timestamp when limit resets
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retrying
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    serviceAuth:
      type: http
      scheme: bearer
      bearerFormat: Service-Token
