openapi: 3.0.3
info:
  title: AtlasMesh Fleet OS API Gateway
  version: 0.1.0
  description: |
    Main API gateway for the AtlasMesh Fleet Operating System.
    
    Provides unified access to all fleet management services with authentication,
    authorization, rate limiting, and request routing.
    
  contact:
    name: AtlasMesh API Team  
    email: api@atlasmesh.ai
    url: https://docs.atlasmesh.ai
  license:
    name: Proprietary
    url: https://atlasmesh.ai/license

servers:
  - url: https://api.atlasmesh.ai/v1
    description: Production API
  - url: https://api-staging.atlasmesh.ai/v1  
    description: Staging API
  - url: http://localhost:8080/v1
    description: Local development

security:
  - bearerAuth: []
  - apiKeyAuth: []

paths:
  # Health and Info
  /health:
    get:
      summary: Health check endpoint
      operationId: getHealth
      tags: [System]
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /info:
    get:
      summary: Get API information
      operationId: getInfo
      tags: [System]  
      security: []
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'

  # Authentication
  /auth/login:
    post:
      summary: Authenticate user
      operationId: login
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh access token
      operationId: refreshToken
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  # Trip Management (Proxy to dispatch-service)
  /trips:
    get:
      summary: List trips
      operationId: getTrips
      tags: [Trips]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/SectorFilter'
        - $ref: '#/components/parameters/StatusFilter'
        - $ref: '#/components/parameters/DateRange'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
      responses:
        '200':
          description: List of trips
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripsResponse'

    post:
      summary: Create new trip
      operationId: createTrip
      tags: [Trips]
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTripRequest'
      responses:
        '201':
          description: Trip created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /trips/{tripId}:
    get:
      summary: Get trip by ID
      operationId: getTripById
      tags: [Trips]
      parameters:
        - $ref: '#/components/parameters/TripId'
      responses:
        '200':
          description: Trip details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '404':
          description: Trip not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update trip
      operationId: updateTrip
      tags: [Trips]
      parameters:
        - $ref: '#/components/parameters/TripId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTripRequest'
      responses:
        '200':
          description: Trip updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'

  /trips/{tripId}/cancel:
    post:
      summary: Cancel trip
      operationId: cancelTrip
      tags: [Trips]
      parameters:
        - $ref: '#/components/parameters/TripId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelTripRequest'
      responses:
        '200':
          description: Trip cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'

  # Vehicle Management (Proxy to fleet-manager)
  /vehicles:
    get:
      summary: List vehicles
      operationId: getVehicles
      tags: [Vehicles]
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/VehicleStatusFilter'
        - $ref: '#/components/parameters/VehicleTypeFilter'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationOffset'
      responses:
        '200':
          description: List of vehicles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehiclesResponse'

  /vehicles/{vehicleId}:
    get:
      summary: Get vehicle by ID
      operationId: getVehicleById
      tags: [Vehicles]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
      responses:
        '200':
          description: Vehicle details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'

  /vehicles/{vehicleId}/telemetry:
    get:
      summary: Get vehicle telemetry
      operationId: getVehicleTelemetry
      tags: [Vehicles]
      parameters:
        - $ref: '#/components/parameters/VehicleId'
        - $ref: '#/components/parameters/TelemetryTimeRange'
      responses:
        '200':
          description: Vehicle telemetry data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    TenantId:
      name: X-Tenant-ID
      in: header
      required: true
      schema:
        type: string
        format: uuid
      description: Tenant identifier for multi-tenancy

    TripId:
      name: tripId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Trip identifier

    VehicleId:
      name: vehicleId
      in: path
      required: true
      schema:
        type: string
      description: Vehicle identifier

    SectorFilter:
      name: sector
      in: query
      schema:
        type: string
        enum: [defense, mining, logistics, ride_hail]
      description: Filter by sector

    StatusFilter:
      name: status
      in: query
      schema:
        type: array
        items:
          type: string
          enum: [draft, scheduled, dispatched, en_route, completed, cancelled, failed]
      description: Filter by trip status

    VehicleStatusFilter:
      name: status
      in: query
      schema:
        type: array
        items:
          type: string
          enum: [healthy, degraded, standby, maintenance, retired]
      description: Filter by vehicle status

    VehicleTypeFilter:
      name: vehicle_type
      in: query
      schema:
        type: array
        items:
          type: string
      description: Filter by vehicle type

    DateRange:
      name: date_range
      in: query
      schema:
        type: string
        pattern: '^\\d{4}-\\d{2}-\\d{2}/\\d{4}-\\d{2}-\\d{2}$'
      description: Date range filter (YYYY-MM-DD/YYYY-MM-DD)

    TelemetryTimeRange:
      name: time_range
      in: query
      schema:
        type: string
        enum: [1h, 6h, 24h, 7d, 30d]
        default: 1h
      description: Time range for telemetry data

    PaginationLimit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Maximum number of results to return

    PaginationOffset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Number of results to skip

  schemas:
    # System Schemas
    HealthResponse:
      type: object
      required: [status, timestamp, version]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        services:
          type: object
          additionalProperties:
            type: string
            enum: [healthy, degraded, unhealthy]

    InfoResponse:
      type: object
      required: [name, version, build, environment]
      properties:
        name:
          type: string
          example: "AtlasMesh Fleet OS API Gateway"
        version:
          type: string
          example: "0.1.0"
        build:
          type: string
          example: "abc123def"
        environment:
          type: string
          enum: [development, staging, production]
        capabilities:
          type: array
          items:
            type: string

    ErrorResponse:
      type: object
      required: [error, message, timestamp]
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        timestamp:
          type: string
          format: date-time
        details:
          type: object
          description: Additional error details
        trace_id:
          type: string
          description: Request trace ID for debugging

    # Authentication Schemas
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        tenant_id:
          type: string
          format: uuid

    RefreshRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string

    AuthResponse:
      type: object
      required: [access_token, token_type, expires_in]
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          enum: [Bearer]
        expires_in:
          type: integer
          description: Token lifetime in seconds
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      required: [id, username, role]
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, operator, dispatcher, analyst, viewer]
        permissions:
          type: array
          items:
            type: string
        tenant_id:
          type: string
          format: uuid

    # Core Domain Schemas
    Trip:
      type: object
      required: [id, tenant_id, sector, type, status, created_at]
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        sector:
          type: string
          enum: [defense, mining, logistics, ride_hail]
        type:
          type: string
          enum: [release_run, ops_run, mapping_run, calibration, passenger_ride, delivery, yard_move, maintenance, emergency, training]
        status:
          type: string
          enum: [draft, scheduled, dispatched, en_route, paused, completed, cancelled, failed]
        vehicle_id:
          type: string
          nullable: true
        route:
          $ref: '#/components/schemas/Route'
        schedule:
          $ref: '#/components/schemas/Schedule'
        manifest:
          $ref: '#/components/schemas/TripManifest'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
          nullable: true

    CreateTripRequest:
      type: object
      required: [sector, type, schedule]
      properties:
        sector:
          type: string
          enum: [defense, mining, logistics, ride_hail]
        type:
          type: string
          enum: [release_run, ops_run, mapping_run, calibration, passenger_ride, delivery, yard_move, maintenance, emergency, training]
        vehicle_id:
          type: string
          nullable: true
        schedule:
          $ref: '#/components/schemas/Schedule'
        route_params:
          $ref: '#/components/schemas/RouteParams'
        manifest:
          $ref: '#/components/schemas/TripManifest'
        priority:
          type: integer
          minimum: 1
          maximum: 10
          default: 5

    UpdateTripRequest:
      type: object
      properties:
        schedule:
          $ref: '#/components/schemas/Schedule'
        route_params:
          $ref: '#/components/schemas/RouteParams'
        manifest:
          $ref: '#/components/schemas/TripManifest'
        priority:
          type: integer
          minimum: 1
          maximum: 10

    CancelTripRequest:
      type: object
      required: [reason]
      properties:
        reason:
          type: string
          enum: [user_cancelled, weather, vehicle_fault, policy_violation, emergency]
        details:
          type: string
          maxLength: 500

    Schedule:
      type: object
      required: [start_time]
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        duration_minutes:
          type: integer
          minimum: 1
          nullable: true
        timezone:
          type: string
          default: "UTC"

    Route:
      type: object
      required: [start_location, end_location]
      properties:
        start_location:
          $ref: '#/components/schemas/Location'
        end_location:
          $ref: '#/components/schemas/Location'
        waypoints:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        estimated_duration_minutes:
          type: integer
        estimated_distance_meters:
          type: integer
        map_version:
          type: string

    RouteParams:
      type: object
      properties:
        start_location:
          $ref: '#/components/schemas/Location'
        end_location:
          $ref: '#/components/schemas/Location'
        waypoints:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        optimize_for:
          type: string
          enum: [time, distance, energy, safety]
          default: safety
        avoid_tolls:
          type: boolean
          default: false
        max_speed_override:
          type: integer
          nullable: true

    TripManifest:
      type: object
      properties:
        map_version:
          type: string
        policy_pack_version:
          type: string
        experimental_routes:
          type: array
          items:
            type: string
        weather_override:
          type: boolean
          default: false
        operator_notes:
          type: string
          maxLength: 1000

    Location:
      type: object
      required: [latitude, longitude]
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number  
          format: double
          minimum: -180
          maximum: 180
        altitude:
          type: number
          format: double
          nullable: true
        heading:
          type: number
          format: double
          minimum: 0
          maximum: 360
          nullable: true
        accuracy:
          type: number
          format: double
          nullable: true

    Vehicle:
      type: object
      required: [id, type, status, capability_manifest]
      properties:
        id:
          type: string
        type:
          type: string
        model:
          type: string
        vin:
          type: string
        license_plate:
          type: string
        status:
          type: string
          enum: [healthy, degraded, standby, maintenance, retired]
        capability_manifest:
          $ref: '#/components/schemas/CapabilityManifest'
        current_location:
          $ref: '#/components/schemas/Location'
        battery_level:
          type: integer
          minimum: 0
          maximum: 100
          nullable: true
        last_heartbeat:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CapabilityManifest:
      type: object
      required: [vehicle_class, max_speed, drive_by_wire]
      properties:
        vehicle_class:
          type: string
          enum: [ugv, sedan, suv, truck, bus]
        max_speed:
          type: integer
          description: Maximum speed in km/h
        max_payload:
          type: integer
          description: Maximum payload in kg
        drive_by_wire:
          type: object
          required: [steering, throttle, brake]
          properties:
            steering:
              type: boolean
            throttle:
              type: boolean
            brake:
              type: boolean
            gear:
              type: boolean
        sensors:
          type: array
          items:
            type: object
            required: [type, model]
            properties:
              type:
                type: string
                enum: [lidar, camera, radar, imu, gps]
              model:
                type: string
              count:
                type: integer
                default: 1
        operating_conditions:
          type: object
          properties:
            temperature_range:
              type: object
              properties:
                min:
                  type: integer
                max:
                  type: integer
            max_grade:
              type: integer
              description: Maximum grade in degrees

    # Response Collections
    TripsResponse:
      type: object
      required: [trips, pagination]
      properties:
        trips:
          type: array
          items:
            $ref: '#/components/schemas/Trip'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    VehiclesResponse:
      type: object
      required: [vehicles, pagination]
      properties:
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/Vehicle'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    TelemetryResponse:
      type: object
      required: [vehicle_id, time_range, data]
      properties:
        vehicle_id:
          type: string
        time_range:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/TelemetryPoint'

    TelemetryPoint:
      type: object
      required: [timestamp]
      properties:
        timestamp:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/Location'
        speed:
          type: number
          format: double
        battery_level:
          type: integer
          minimum: 0
          maximum: 100
        fuel_level:
          type: integer
          minimum: 0
          maximum: 100
        engine_temp:
          type: number
          format: double
        diagnostics:
          type: object
          additionalProperties: true

    PaginationMeta:
      type: object
      required: [offset, limit, total]
      properties:
        offset:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        has_more:
          type: boolean
