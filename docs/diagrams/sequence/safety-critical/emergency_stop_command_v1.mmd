---
title: Emergency Stop Command Flow - AtlasMesh Fleet OS
---
sequenceDiagram
    %% SAFETY CRITICAL: Emergency stop command dispatch and execution
    %% Version 1.0 | Generated from: Vehicle Gateway traces | Safety Level: CRITICAL
    %% SAFETY: This diagram shows the emergency stop command flow
    %% INTEGRATION CONTRACT: WebSocket + Kafka + ROS2 command chain
    %% LATENCY BUDGET: <100ms end-to-end for safety compliance
    %% COMPLIANCE: UAE AV safety regulations require documented emergency procedures

    participant SO as 🚨 Safety Operator
    participant UI as 🖥️ Control Center UI
    participant GW as 🚪 API Gateway
    participant AUTH as 🔐 Auth Service
    participant POL as 📋 Policy Engine
    participant VGW as 🌐 Vehicle Gateway
    participant KAFKA as 📨 Event Bus (Kafka)
    participant AGENT as 🤖 Vehicle Agent (ROS2)
    participant VEH as 🚗 Vehicle Systems

    %% EMERGENCY STOP INITIATION
    Note over SO,VEH: EMERGENCY STOP INITIATION
    SO->>UI: **EMERGENCY STOP**<br/>Clicks emergency button
    Note right of SO: SAFETY: Operator identifies<br/>hazardous situation

    UI->>UI: Show confirmation dialog<br/>"CONFIRM EMERGENCY STOP"
    Note right of UI: UX: Prevent accidental activation<br/>but minimize delay

    SO->>UI: Confirms emergency stop
    UI->>GW: POST /api/v1/emergency/stop<br/>{vehicle_id, reason, operator_id}
    Note right of UI: SECURITY: Includes operator identity<br/>for audit trail

    %% AUTHENTICATION & AUTHORIZATION
    Note over SO,VEH: AUTHENTICATION & AUTHORIZATION
    GW->>AUTH: Validate JWT token<br/>Check emergency permissions
    Note right of GW: SECURITY: Emergency commands require<br/>special authorization

    AUTH->>AUTH: Verify operator has<br/>EMERGENCY_STOP role
    AUTH-->>GW: ✓ Authorized<br/>{operator_id, roles}

    GW->>POL: Evaluate emergency policy<br/>{vehicle_id, operator_id, context}
    Note right of GW: POLICY: Check if emergency stop<br/>is allowed for this vehicle/context

    POL->>POL: Evaluate OPA policy:<br/>allow_emergency_stop
    POL-->>GW: ✓ Policy allows<br/>{decision: allow, reason}

    %% COMMAND DISPATCH
    Note over SO,VEH: COMMAND DISPATCH
    GW->>VGW: Send emergency command<br/>{command_id, vehicle_id, type: EMERGENCY_STOP}
    Note right of GW: PERF: Direct gRPC call<br/>for minimum latency

    VGW->>VGW: **PRIORITY QUEUE**<br/>Bypass normal command queue
    Note right of VGW: SAFETY: Emergency commands<br/>have absolute priority

    VGW->>KAFKA: Publish emergency event<br/>topic: vehicle.commands.emergency
    Note right of VGW: AUDIT: All emergency commands<br/>logged for compliance

    %% VEHICLE COMMUNICATION
    Note over SO,VEH: VEHICLE COMMUNICATION
    VGW->>AGENT: WebSocket: EMERGENCY_STOP<br/>{command_id, timestamp, authority}
    Note right of VGW: INTEGRATION: Real-time WebSocket<br/>for immediate delivery

    AGENT->>AGENT: **IMMEDIATE PROCESSING**<br/>Interrupt current operations
    Note right of AGENT: SAFETY: Emergency commands<br/>preempt all other operations

    AGENT->>VEH: ROS2: /emergency_stop<br/>{stop_type: IMMEDIATE}
    Note right of AGENT: ROS2 CONTRACT: Emergency stop topic<br/>with immediate execution

    %% VEHICLE RESPONSE
    Note over SO,VEH: VEHICLE RESPONSE
    VEH->>VEH: **EXECUTE EMERGENCY STOP**<br/>- Apply brakes<br/>- Disable autonomy<br/>- Hazard lights ON
    Note right of VEH: SAFETY: Physical safety systems<br/>activated immediately

    VEH->>AGENT: ROS2: /emergency_status<br/>{status: STOPPED, location, timestamp}
    AGENT->>VGW: WebSocket: Emergency stop executed<br/>{status: COMPLETED, telemetry}

    %% CONFIRMATION & MONITORING
    Note over SO,VEH: CONFIRMATION & MONITORING
    VGW->>KAFKA: Publish completion event<br/>topic: vehicle.events.emergency_completed
    VGW->>GW: gRPC: Command completed<br/>{command_id, status: SUCCESS}

    GW->>UI: HTTP 200: Emergency stop executed<br/>{vehicle_id, status, location}
    UI->>SO: **VISUAL CONFIRMATION**<br/>Vehicle stopped - Emergency active

    %% CONTINUOUS MONITORING
    Note over SO,VEH: CONTINUOUS MONITORING
    loop Every 1 second
        VEH->>AGENT: ROS2: Vehicle status<br/>{stopped: true, emergency: true}
        AGENT->>VGW: WebSocket: Status update
        VGW->>UI: Real-time status<br/>{emergency_active: true}
        UI->>SO: Dashboard update<br/>Emergency status visible
    end

    %% AUDIT & COMPLIANCE
    Note over SO,VEH: AUDIT & COMPLIANCE
    KAFKA->>KAFKA: Store emergency event<br/>for compliance audit
    Note right of KAFKA: COMPLIANCE: All emergency events<br/>retained for regulatory review

    %% Styling
    %%{init: {'theme':'base', 'themeVariables': {'primaryColor': '#ff4757', 'primaryTextColor': '#fff', 'primaryBorderColor': '#d63031', 'lineColor': '#2d3436', 'sectionBkgColor': '#ffeaa7', 'altSectionBkgColor': '#fab1a0', 'gridColor': '#636e72', 'secondaryColor': '#00b894', 'tertiaryColor': '#fd79a8'}}}%%
